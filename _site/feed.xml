<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-11-20T08:44:15-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Maker Projects for Learning</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Robotic Arm</title><link href="http://localhost:4000/change/2020/09/22/Robotic-Arm.html" rel="alternate" type="text/html" title="Robotic Arm" /><published>2020-09-22T10:06:30-04:00</published><updated>2020-09-22T10:06:30-04:00</updated><id>http://localhost:4000/change/2020/09/22/Robotic-Arm</id><content type="html" xml:base="http://localhost:4000/change/2020/09/22/Robotic-Arm.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The goal of this tutorial is to walk you through the design of a robotic arm, from design requirements to planning to a completed design that you could then fabricate. We hope to provide enough context for our decisions so that you could take this knowledge and apply it to designing things besides a robotic arm. We will also routinely reference physics and other engineering theory to verify that the arm will work, improve the design, and demonstrate how theory gets used in practical engineering.&lt;/p&gt;

&lt;p&gt;This tutorial is split up into sections for the various “subsystems” of the robotic arm. These subsystems are the mechanical system, electrical system, and software system. These systems will then be broken up into even smaller subsystems. Most things in the world can be viewed as a collection of systems working together. There are many advantages to taking this viewpoint when designing things. For one it gives you a logical way to break the project into manageable chunks to work through. It is also scalable, you could have different people work on different subsystems, or even entire teams working on a subsystem. That is not to say the design of the systems are independent. Obviously the electronics of a robotic arm depend on the mechanical system and vica-versa. But by incrementally designing you can ensure that all design goals are met and that the systems will work together seamlessly.&lt;/p&gt;

&lt;h2 id=&quot;methodology&quot;&gt;Methodology&lt;/h2&gt;

&lt;p&gt;This chart demonstrates the basic design methodology that I’ll be walking you through. At the most basic level we start with a set of goals, that we use to form more concrete design requirements. These design requirements then inform the design requirements of the various subsections. Then the various subsections get designed, and then combined together in the final design.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;http://localhost:4000/imgs/Robotic_Arm_imgs/Engineering_Flowchart.png&quot; alt=&quot;Engineering Flowchart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As is denoted in this diagram, the subsections are not designed in a vacuum. The size of the arm in part determines the motors that get used which determine what circuitry is needed to control those motors, etc. What this diagram does not show, is that the process is not as linear as may be indicated. Your design requirements may change, parts of your goals may not be attainable, etc. You likely won’t know how feasible your design requirements are until you start designing and prototyping. As such you may learn that what you thought was possible may not be, or maybe your requirements weren’t as ambitious as they could have been.&lt;/p&gt;

&lt;p&gt;This tutorial will generally follow this flowchart. Included in this will be discussion of various sections that might have driven our design requirements or forced us to go with a different solution that we may have originally imagined.&lt;/p&gt;

&lt;h1 id=&quot;goals&quot;&gt;Goals&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;Starting at the first step of our design methodology, we first need to start with basic goals for the project. These goals are as follows&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create something that obviously resembles a robotic arm&lt;/li&gt;
  &lt;li&gt;Design something that can reasonably be built by a college student with access to standard equipment&lt;/li&gt;
  &lt;li&gt;Follow “good design practices” as often as possible&lt;/li&gt;
  &lt;li&gt;Have the final design be affordable enough to built&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these goals are self explanatory. Some of these goals may get higher priority than others as design decisions need to be made, but these are the basics of what we started with. If you were to design a robotic arm, you may end up with different goals. You may care more about the functionality, or you may have a specific application in mind that you can tailor your design towards.&lt;/p&gt;

&lt;h1 id=&quot;design-requirements&quot;&gt;Design Requirements&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Now that we have our basic goals, we can try and flesh these out into design requirements. Generally speaking, the more specific your design goals and requirements are the more straightforward the design process will be. That said, there are a lot of decisions that you make when you define your design requirements. For example the size of robotic arm plays a large part in terms of things like materials used, motor choice, and design cost. You’re most likely not going to know all of the trade-offs that those decisions play when you set out on a project. That means your design requirements are likely to change as you progress through the design phase.&lt;/p&gt;

&lt;p&gt;That being said for this robotic arm our main goal was for it to be straight forward to design and build, and make use of available parts that are reasonably priced. Here are the design goals we came up with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be small enough to sit on a desk and affordable to build&lt;/li&gt;
  &lt;li&gt;Have a reach of about 12in or 30cm&lt;/li&gt;
  &lt;li&gt;Be able to lift small objects&lt;/li&gt;
  &lt;li&gt;Have 3 axises plus a controllable hand/grabber&lt;/li&gt;
  &lt;li&gt;Have a reasonable amount of positional accuracy and repeatability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Throughout this tutorial we will discuss the rational behind these design goals, and what the robot might look like if you choose different design goals. But for now we’ll keep them in mind as we start the design process.&lt;/p&gt;

&lt;h1 id=&quot;design&quot;&gt;Design&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;

&lt;p&gt;Like we said in the overview, we have split the design into three major subsystems: mechanical, electrical, and software. First let’s define exactly what we mean by those terms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mechanical System&lt;/strong&gt;:&lt;/p&gt;
&lt;div style=&quot;padding-left: 30px;&quot;&gt;
This is concerned with the parts of the arm that are a part of it's structure. This is a fairly broad definition because it's a broad category. It includes the design of the joints of the robotic arm, the linkages between the joints, the base of the arm, and any other parts that physically hold, support, or contain any part of the robot.
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Electrical System&lt;/strong&gt;:&lt;/p&gt;
&lt;div style=&quot;padding-left: 30px;&quot;&gt;
This one if fairly self explanatory, if it uses electricity it's probably part of the electrical system. This includes the motors, power supplies, and controllers. 
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Software System&lt;/strong&gt;:&lt;/p&gt;
&lt;div style=&quot;padding-left: 30px;&quot;&gt;
Again fairly self explanatory, any code that is part of the operation of the robot. This could include code that runs on a microcontroller or programs that run on a computer connected to the robotic arm. 
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
A note about motors: motors exist in a bit of a gray spot between the mechanical and electrical system, they are an integral part of both design. That being said the mechanical system views motors as a physical part that produces a force and needs to be mounted, while the electrical system views motors as a circuit element that needs to be powered and controlled.&lt;/p&gt;

&lt;h2 id=&quot;mechanical-system&quot;&gt;Mechanical System&lt;/h2&gt;

&lt;p&gt;Now that we’ve gotten through the design requirements we can start the actual designing. We will also talk about why the design requirements are the way they are. So we’ll start from the ground up. As discussed early when you want to build a robotic arm you still have a lot of questions to answer about specific design requirements before you can really start in on a design. So lets go through the design requirements one by one and talk about what they mean, why they were chosen, and what they imply for the design.&lt;/p&gt;

&lt;p&gt;1 - Be small enough to sit on a desk and affordable to build&lt;/p&gt;

&lt;p&gt;We don’t want to build a big robotic arm that you might find on a factory production floor, and we don’t want it to cost thousands of dollars to build. These are practical requirements that will inform our design as well as our other design requirements.&lt;/p&gt;

&lt;p&gt;2 - Have a reach of about 12in or 30cm&lt;/p&gt;

&lt;p&gt;This is really a more specific version of saying it should be able to sit on a desk. We have taken a general requirement and given it a clear meaning. The exact size if somewhat arbitrary. A nice round number like 30cm will our numbers reasonably nice. This size also influences what motors we have to choose. As we’ll talk about later, the longer the arm is, the bigger motor or the more mechanical advantage we need in order for the robot to be able to support itself as well as anything it is holding onto.&lt;/p&gt;

&lt;p&gt;3 - Be able to lift small objects&lt;/p&gt;

&lt;p&gt;We want the arm to at least be somewhat functional, although we’re prioritizing&lt;/p&gt;

&lt;p&gt;4 - Have 3 axises plus a controllable hand/grabber&lt;/p&gt;

&lt;p&gt;This is a practical requirement. Most modern robotic arms have 6 axis, but at this scale that would be challenging, and is more design work that this tutorial is aiming for. Three axises is the smallest number of axises that can make something that is at least reasonably useful.&lt;/p&gt;

&lt;p&gt;5 - Have a reasonable amount of positional accuracy and repeatability&lt;/p&gt;

&lt;p&gt;This is another general requirement that basically amounts to saying that the robotic arm should know where it is and be able to move between locations, although the precise positional accuracy is unimportant.&lt;/p&gt;

&lt;h3 id=&quot;base-of-the-arm&quot;&gt;Base of the Arm&lt;/h3&gt;

&lt;h3 id=&quot;shoulder&quot;&gt;Shoulder&lt;/h3&gt;

&lt;h3 id=&quot;elbow&quot;&gt;Elbow&lt;/h3&gt;

&lt;h3 id=&quot;hand&quot;&gt;Hand&lt;/h3&gt;

&lt;h2 id=&quot;electrical-system&quot;&gt;Electrical System&lt;/h2&gt;

&lt;h2 id=&quot;software-system&quot;&gt;Software System&lt;/h2&gt;</content><author><name></name></author><category term="change" /><summary type="html">Introduction Overview The goal of this tutorial is to walk you through the design of a robotic arm, from design requirements to planning to a completed design that you could then fabricate. We hope to provide enough context for our decisions so that you could take this knowledge and apply it to designing things besides a robotic arm. We will also routinely reference physics and other engineering theory to verify that the arm will work, improve the design, and demonstrate how theory gets used in practical engineering. This tutorial is split up into sections for the various “subsystems” of the robotic arm. These subsystems are the mechanical system, electrical system, and software system. These systems will then be broken up into even smaller subsystems. Most things in the world can be viewed as a collection of systems working together. There are many advantages to taking this viewpoint when designing things. For one it gives you a logical way to break the project into manageable chunks to work through. It is also scalable, you could have different people work on different subsystems, or even entire teams working on a subsystem. That is not to say the design of the systems are independent. Obviously the electronics of a robotic arm depend on the mechanical system and vica-versa. But by incrementally designing you can ensure that all design goals are met and that the systems will work together seamlessly. Methodology This chart demonstrates the basic design methodology that I’ll be walking you through. At the most basic level we start with a set of goals, that we use to form more concrete design requirements. These design requirements then inform the design requirements of the various subsections. Then the various subsections get designed, and then combined together in the final design. As is denoted in this diagram, the subsections are not designed in a vacuum. The size of the arm in part determines the motors that get used which determine what circuitry is needed to control those motors, etc. What this diagram does not show, is that the process is not as linear as may be indicated. Your design requirements may change, parts of your goals may not be attainable, etc. You likely won’t know how feasible your design requirements are until you start designing and prototyping. As such you may learn that what you thought was possible may not be, or maybe your requirements weren’t as ambitious as they could have been. This tutorial will generally follow this flowchart. Included in this will be discussion of various sections that might have driven our design requirements or forced us to go with a different solution that we may have originally imagined. Goals Starting at the first step of our design methodology, we first need to start with basic goals for the project. These goals are as follows Create something that obviously resembles a robotic arm Design something that can reasonably be built by a college student with access to standard equipment Follow “good design practices” as often as possible Have the final design be affordable enough to built Most of these goals are self explanatory. Some of these goals may get higher priority than others as design decisions need to be made, but these are the basics of what we started with. If you were to design a robotic arm, you may end up with different goals. You may care more about the functionality, or you may have a specific application in mind that you can tailor your design towards. Design Requirements Now that we have our basic goals, we can try and flesh these out into design requirements. Generally speaking, the more specific your design goals and requirements are the more straightforward the design process will be. That said, there are a lot of decisions that you make when you define your design requirements. For example the size of robotic arm plays a large part in terms of things like materials used, motor choice, and design cost. You’re most likely not going to know all of the trade-offs that those decisions play when you set out on a project. That means your design requirements are likely to change as you progress through the design phase. That being said for this robotic arm our main goal was for it to be straight forward to design and build, and make use of available parts that are reasonably priced. Here are the design goals we came up with: Be small enough to sit on a desk and affordable to build Have a reach of about 12in or 30cm Be able to lift small objects Have 3 axises plus a controllable hand/grabber Have a reasonable amount of positional accuracy and repeatability Throughout this tutorial we will discuss the rational behind these design goals, and what the robot might look like if you choose different design goals. But for now we’ll keep them in mind as we start the design process. Design Basics Like we said in the overview, we have split the design into three major subsystems: mechanical, electrical, and software. First let’s define exactly what we mean by those terms. Mechanical System: This is concerned with the parts of the arm that are a part of it's structure. This is a fairly broad definition because it's a broad category. It includes the design of the joints of the robotic arm, the linkages between the joints, the base of the arm, and any other parts that physically hold, support, or contain any part of the robot. Electrical System: This one if fairly self explanatory, if it uses electricity it's probably part of the electrical system. This includes the motors, power supplies, and controllers. Software System: Again fairly self explanatory, any code that is part of the operation of the robot. This could include code that runs on a microcontroller or programs that run on a computer connected to the robotic arm. A note about motors: motors exist in a bit of a gray spot between the mechanical and electrical system, they are an integral part of both design. That being said the mechanical system views motors as a physical part that produces a force and needs to be mounted, while the electrical system views motors as a circuit element that needs to be powered and controlled. Mechanical System Now that we’ve gotten through the design requirements we can start the actual designing. We will also talk about why the design requirements are the way they are. So we’ll start from the ground up. As discussed early when you want to build a robotic arm you still have a lot of questions to answer about specific design requirements before you can really start in on a design. So lets go through the design requirements one by one and talk about what they mean, why they were chosen, and what they imply for the design. 1 - Be small enough to sit on a desk and affordable to build We don’t want to build a big robotic arm that you might find on a factory production floor, and we don’t want it to cost thousands of dollars to build. These are practical requirements that will inform our design as well as our other design requirements. 2 - Have a reach of about 12in or 30cm This is really a more specific version of saying it should be able to sit on a desk. We have taken a general requirement and given it a clear meaning. The exact size if somewhat arbitrary. A nice round number like 30cm will our numbers reasonably nice. This size also influences what motors we have to choose. As we’ll talk about later, the longer the arm is, the bigger motor or the more mechanical advantage we need in order for the robot to be able to support itself as well as anything it is holding onto. 3 - Be able to lift small objects We want the arm to at least be somewhat functional, although we’re prioritizing 4 - Have 3 axises plus a controllable hand/grabber This is a practical requirement. Most modern robotic arms have 6 axis, but at this scale that would be challenging, and is more design work that this tutorial is aiming for. Three axises is the smallest number of axises that can make something that is at least reasonably useful. 5 - Have a reasonable amount of positional accuracy and repeatability This is another general requirement that basically amounts to saying that the robotic arm should know where it is and be able to move between locations, although the precise positional accuracy is unimportant. Base of the Arm Shoulder Elbow Hand Electrical System Software System</summary></entry><entry><title type="html">Design a Carabiner</title><link href="http://localhost:4000/project/2020/09/22/Test-Fixture.html" rel="alternate" type="text/html" title="Design a Carabiner" /><published>2020-09-22T10:05:30-04:00</published><updated>2020-09-22T10:05:30-04:00</updated><id>http://localhost:4000/project/2020/09/22/Test-Fixture</id><content type="html" xml:base="http://localhost:4000/project/2020/09/22/Test-Fixture.html">&lt;h1 id=&quot;designing-a-carabiner&quot;&gt;&lt;span id=&quot;anchor&quot;&gt;&lt;/span&gt;Designing a Carabiner&lt;/h1&gt;

&lt;h1 id=&quot;project-information&quot;&gt;&lt;span id=&quot;anchor-1&quot;&gt;&lt;/span&gt;Project Information&lt;/h1&gt;

&lt;p&gt;Description: Students will follow along with a tutorial and learn to
design a 3D printable carabiner in CAD and then use FEA to analyze the
performance of the design under stress. Students will use the insights
gained from FEA to improve the strength and performance of their design.&lt;/p&gt;

&lt;p&gt;https://awkinley.github.io/IQP-Project-Website/&lt;/p&gt;

&lt;p&gt;Learning outcomes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Students will understand how stress affects 3D printed parts.&lt;/li&gt;
  &lt;li&gt;Students will know the basics of how FEA can be applied to part
design.&lt;/li&gt;
  &lt;li&gt;Students will know what FEA is and its applications to mechanical
engineering.&lt;/li&gt;
  &lt;li&gt;Students will better understand how to apply their knowledge of
mechanical stress to part design.&lt;/li&gt;
  &lt;li&gt;Students will be able to use FEA to study part stresses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estimated Time: 5 hours or Less (Depending on previous knowledge)&lt;/p&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;p&gt;What students will need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A computer with CAD that has a FEA Package (Fusion 360 is used in
this tutorial)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;&lt;span id=&quot;anchor-2&quot;&gt;&lt;/span&gt;Introduction&lt;/h2&gt;

&lt;h2 id=&quot;project-goal&quot;&gt;&lt;span id=&quot;anchor-3&quot;&gt;&lt;/span&gt;Project Goal&lt;/h2&gt;

&lt;p&gt;The goal of this project is to introduce part design, design
optimization using FEA (Finite Element Analysis), design for
manufacture, and iterative design. Giving examples of how to apply those
skills to a carabiner, then challenging them to design their own
carabiner.&lt;/p&gt;

&lt;h2 id=&quot;prior-knowledge&quot;&gt;&lt;span id=&quot;anchor-4&quot;&gt;&lt;/span&gt;Prior knowledge&lt;/h2&gt;

&lt;p&gt;This tutorial is designed for using Fusion 360. This tutorial is not
designed to be a replacement for a more comprehensive introduction to
Fusion 360 course, but I will be walking through everything at a basic
level.&lt;/p&gt;

&lt;p&gt;Fusion 360 is not the only CAD program you can use along with this
guide. These concepts will translate to most programs on the market with
a little know-how.&lt;/p&gt;

&lt;h2 id=&quot;needed-programs&quot;&gt;&lt;span id=&quot;anchor-5&quot;&gt;&lt;/span&gt;Needed Programs&lt;/h2&gt;

&lt;p&gt;CAD+FEA: Fusion 360 (or your choice)&lt;/p&gt;

&lt;p&gt;Slicer: Cura (or your choice)&lt;/p&gt;

&lt;h1 id=&quot;designing-a-carabiner-1&quot;&gt;Designing a Carabiner&lt;/h1&gt;

&lt;p&gt;Let’s start designing a carabiner. Like most CAD projects, it is almost
always best to start with a hand drawing of what you want your part to
look like before you do anything on the computer. Hand drawings are a
good way to quickly get your ideas down without needing dimensions or a
detailed idea of what it will look line.&lt;/p&gt;

&lt;p&gt;First, we need to understand the form and function of a carabiner, and
the problem they are meant to solve. Like anything in engineering,
before anything goes down in paper or CAD, the engineer needs to have a
solid fundamental understanding of what they are designing. As these
will be the guiding principles in how the part (piece, system, etc.)
will be formed.&lt;/p&gt;

&lt;p&gt;Whether it’s as simple as a carabiner or as complicated as a satellite,
a solid understanding of the basics is the foundation for how engineers
are able to do their jobs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function&lt;/strong&gt; is the purpose of your design, the specific technical
operations performed. As well as the reason you are building the
product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Form&lt;/strong&gt; is the finalized structure of the device, product, and is the
culmination of how the function is achieved.&lt;/p&gt;

&lt;p&gt;A standard carabiner is simple, and you probably have one lying around
to look at as an example. The main function of a carabiner is to
securely join different components together. These components usually
come in the form of rope, cables, straps, pins, or other fixtures. The
main feature of a carabiner that separates it from other types of
shackles is an easily operated gate, allowing quick connecting and
disconnecting of components.&lt;/p&gt;

&lt;p&gt;With the function in mind, we can jump right to the form since
carabiners have been around for a long time. You probably have one
laying around to look at.
&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100000000000120000000D80C686F01ACBF3AEE4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, it’s time to jump into a rough sketch. These are always the
beginning of creating CAD designs. For this example, I aimed to include
a few key parts. The first of which are what views you want, views in
engineering drawings are how a three-dimensional part is broken up into
2-D drawings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000258000001B3F1196AC706724661.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.makeuk.org/insights/blogs/how-to-read-engineering-drawings-a-simple-guide&quot;&gt;&lt;em&gt;Example of engineering
views&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The front view should always be the view that shows the most detail of
the part. For most parts you would want to include more views, or even
an orthographic view (3-D), but since a carabiner is simple we only need
one view to convey the main shape and functions of the carabiner.&lt;/p&gt;

&lt;p&gt;In the sketch itself, another important feature it needs is noting rough
dimensions, position of the gate, and also noting the radii of corners,
and other features like the direction of motion&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000000000000D8000001200378CDEC5098339CD.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I decided to go with a simple pear shape over something like a ‘bent’
frame for simplicity. I will be going over the gate in more detail
later, but I threw in sketch of that as well.&lt;/p&gt;

&lt;p&gt;But whatever you have, let’s get out first sketch down in CAD.&lt;/p&gt;

&lt;h1 id=&quot;cad-introduction&quot;&gt;CAD Introduction&lt;/h1&gt;

&lt;p&gt;See
&lt;a href=&quot;https://www.autodesk.com/education/edu-software/overview?sorting=featured&amp;amp;filters=individual&quot;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt;
for Link to download Fusion 360 if you do not have it already. Create an
account using your school email and fill out the required information.
You may need to submit your school ID to get a educational license.&lt;/p&gt;

&lt;p&gt;After opening Fusion 360, you should see a screen similar to this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100000000000077E0000048674A046A51D55091A.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the left side is the “Data Panel”, where you will see projects,
create folders, save parts, and other features like sharing files with
others.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100000000000043C0000004EDF44069DAADD478F.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the right side of the screen is the Design Workspace, the virtual
space where parts and assemblies are created. You should see a
“Untitled” in the tab near the top of the window. Also along the top
of the screen is the workspace, clicking on the down arrow nest to
‘Design’ will show all the available workspaces. Each workspace has a
different function, feel free to explore each of these. For this
section, we will only be using the Design workspace.&lt;/p&gt;

&lt;p&gt;To the right of the workspace dropdown is the different toolbars
available. The Solid is for solid modeling, and what we will be focusing
on for our case.&lt;/p&gt;

&lt;p&gt;Double click on “Default Project” and create a new folder for your
Carabiner.&lt;/p&gt;

&lt;p&gt;Once inside that folder, click save on the untitled part, give it a name
and click save.&lt;/p&gt;

&lt;p&gt;Now, we can start modeling. There are a wide range of different tools
inside Fusion 360, and as such there are a multitude of different ways
you can go about modeling your carabiner. To start I will be going over
a simple extrusion, a straight forward method for you to start learning
the methodology for creating parts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000000000001B5000001E980339364DC630731.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To start, click on the “Create Sketch” Button to enter sketch mode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000022F000001D8A69F64750ABDD8CC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking, the center of the design window will show you the
different planes (X Y and Z) you can choose to sketch on. The white dot
in the middle is the origin. To see what each plane is called (Aka named
view) look at the view cube in the upper right side of the screen. After
clicking on the plane you want, you will be automatically oriented to
perpendicular to the plane.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000000000000574000000E55C9B743E9AC793E4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once here, you will see the “Sketch” toolbar appear across the top of
your window.&lt;/p&gt;

&lt;p&gt;In this toolbar, you can create the features that make up your sketch.
The sketch tool works similarly to sketching by hand, you can create
lines, circles, rectangles, and other features one by one and combine
them together to create your final sketch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000358000001E48DFC93BC96DDFF42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the arrow next to Create, and mouse down over the different
options. Hovering over each provides a short description of how to use
it and can save you lots of time.&lt;/p&gt;

&lt;p&gt;Looking at my sketch, I started off by adding some construction
geometry. Construction geometry, denoted by a dashed line, is treated
like any normal sketch but is only there to help you better define the
rest of your sketch.&lt;/p&gt;

&lt;p&gt;Clicking on the line tool (Hotkey L), first click on the origin, then
move your cursor up a little bit, hovering near the green line (denoting
the Y axis) your second point should ‘Snap’ to being vertical. Before
clicking to confirm placement, move your mouse to the left and right.
When snapping to a grid or line, you will notice that a small blue
symbol pops up to the side of the line. This symbol is a constraint that
is automatically applied when snapping, a vertical constraint in this
case. Constraints can also be added later down the line, click somewhere
on the side so the line isn’t snapped vertically.&lt;/p&gt;

&lt;p&gt;After placing, click on the line (highlighted blue) and then click on
the “Horizontal/Vertical” constraint. Fusion will apply the Horizontal
or Vertical constraint to whatever orientation the line is closest to.&lt;/p&gt;

&lt;p&gt;Holding control while selecting a specific part of a sketch allows you
to apply constraints to different sketch components together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000018D000002A4BF8A8F380BBE8B04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After your line is placed, we need to make is construction geometry, to
do this click on the line and press x (Hotkey for changing to/from
construction geometry). Your line should now look like the photo above.&lt;/p&gt;

&lt;p&gt;You will see that the line is black, but with a white circle on one end.
The black color means that the line is geometrically constrained (Fixed
to the origin, and Vertical), while the white circle on the second point
means that the length of the line is not constrained (whereas a light
blue line means it is not geometrically constrained).&lt;/p&gt;

&lt;p&gt;To fully constrain the line, click on the “Sketch Dimension” tool, click
on the line, move the dimension note off the line slightly so you can
see it. Finally, enter a dimension into the box and press enter.&lt;/p&gt;

&lt;p&gt;Congrats! You have now created a fully defined line. For creating the
rest of the sketches for your carabiner, you should follow the same
strategy. Let me go through how I did this for the outline.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002560000035AC4996EEBD6CB14BD.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, I placed a center line, with two circles on either end. Then I
added dimensions that seemed appropriate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002350000036329373D4D6141B3AE.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, I placed one free line on the left side of my carabiner (free
meaning not snapped to anything) that’s long enough to overhang both of
my construction circles. Then, I made the free line tangent to both
circles so they would connect at the right spot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002150000035D7694D4A3C65332C1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, I used the “Trim” tool in the Modify section of the sketch
toolbar (scissor icon in the middle). The trim tool is quite useful, it
allows you to drag across unwanted parts of a sketch. It also
automatically deletes the part from where you dragged to the nearest
node.&lt;/p&gt;

&lt;p&gt;So here, the trim tool automatically cut down the hanging end of the
line so it now terminates at the point where it contacts the
construction circles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000312000003558D60B40A752A4D61.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, I used the mirror tool to mirror the cut line across to the
other side of the carabiner. The mirror tool (found in the Create
section of the toolbar) allows you to mirror any objects over a mirror
line. Symmetry is your friend, and you should use it whenever possible
so you don’t need to go through and do any more work than you need to.
The mirror tool is also time efficient and can be used for solid bodies
as well.&lt;/p&gt;

&lt;p&gt;After confirming, you will also see new constraint symbols show up on
your sketch. If you do not know what a constraint is, click on the
symbol and look for the text in the lower right corner of the screen.
This can be useful for checking what exactly the symbol means, and when
you click on one constraint symbol the others in the set of constraints
will also become bold.&lt;/p&gt;

&lt;p&gt;You can also click on any other part of your sketch (Point, line,
circle), and it will tell you what it is, and it’s dimensions in the
lower right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000021C00000394976F1F0C62D45155.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, I used the trim tool again to cut out the internal radii from the
construction circles to create an arc, then make those arc’s back into a
solid state by selecting them and pressing x.&lt;/p&gt;

&lt;p&gt;You will now notice that the interior of the sketch has changed color,
this means that the external sketch area is now officially a closed
loop. Meaning that the interior is fully closed in, and we can now use
Solid tools to create a three-dimensional object with said sketch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002160000038A35B4C6D638178D95.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our final outline, we can use another handy tool to
save us some time. To the left of the Trim tool is the Offset tool,
letting us automatically create the same sketch as we just did but
larger/smaller.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000044300000458A1CC347502443235.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can create this sketch into a three-dimensional part.
Selecting the “Solid” Tab, then select the extrude button (left of the
sketch button). Then clicking on the outer profile, we can extrude this
sketch outwards.&lt;/p&gt;

&lt;p&gt;Another handy tip for entering dimensions is that Fusion can
automatically do math for you. Here, I just entered in 3/8 as a fraction
and it will automatically change the dimension to 0.375. But you can
also enter equations like (3/8)+(0.677*0.25) and (correctly formatted)
it will do the math for you as well as save your equation so you can go
back and change it without doing the math again. A place you should
always use this is making a dimension larger/smaller for a specific
tolerance. You can type in ((3/16)+0.03), and go back to change the
added 0.03 without needing to remember what the original dimension was.&lt;/p&gt;

&lt;p&gt;Now you should have some form of a solid body, and now you should see
that inside the Bodies tab in the upper left.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000328000003FCA024099631244118.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will also see the extrude and a sketch symbol in the lower left
corner of the window, along with something that looks like a video. This
bar is the timeline, and one of the most useful tools in Fusion 360, the
timeline records the sketches, extrusions, and other operations you make
in your model. Clicking on the symbols will highlight them in the view
window and in the document tree (upper left drop down menus), you can
also double click (or right-click) on a specific symbol to edit that
feature.&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;h2 id=&quot;3d-printing&quot;&gt;&lt;span id=&quot;anchor-6&quot;&gt;&lt;/span&gt;3D Printing&lt;/h2&gt;

&lt;p&gt;3D printing and specifically FDM is a form of additive manufacturing
that can turn part files into finished parts using a variety of
materials. FDM stands for Fused Deposition Modeling, creating parts by
putting down material layer by layer until a 3D part is formed. With
each layer being a cross-section of the chosen part file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AwIjArLWjtY&quot;&gt;&lt;em&gt;_3D Printer Close Up_&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000000000001E000000168E7D6A658ED2122A4.jpg&quot; alt=&quot;&quot; title=&quot;video-titled-3d-printer-close-up&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a whole, you can 3D print out of materials from sugar to Kevlar, but
we will be focusing on PLA and ABS. The two very common materials to
print with.&lt;/p&gt;

&lt;p&gt;PLA is a thermoplastic polymer usually made from corn starch. PLA’s
advantages are its low cost, ease of printability and good strength.&lt;/p&gt;

&lt;p&gt;ABS is another low-cost thermoplastic widely used in 3D printing along
with injection molding. With better impact resistance and wear
resistance than PLA. With the main disadvantage of being harder to print
due to higher temperatures and increased warpage.&lt;/p&gt;

&lt;p&gt;One of the most useful ways to gain a better understanding of different
materials is by looking at the stress-strain curve. Showing the
relationship between stress (σ), representing the amount of force the
material is under per cross sectional area, measured in lb/in^2 or
N/m^2. And axial strain ε, representing how much the material has
changed in shape under a certain stress, measured in change in length
(ΔL) / original length.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000000000002FF000002A0D65D00B236388ED8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure X, Stress-Strain graph for low carbon steel&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000000000003370000022932137E33AD9A21E2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure _; ABS vs PLA Stress-Strain Graph&lt;/p&gt;

&lt;p&gt;From these two graphs, what can we tell about these materials? The
region from the start to the first peak is called the elastic region. We
can see that comparing PLA’s graph to ABS, PLA has a steeper slope
before the yield point. The slope of this line is the Young’s modulus E,
representing the relation between tensile stress σ, and axial strain ε
(E = σ/ε). So, looking back to the graphs of PLA and ABS, we can see
that PLA is stiffer, and has a higher yield strength.&lt;/p&gt;

&lt;p&gt;But this is not the whole story, since with this graph we can also
measure the energy absorbed by the material, known as toughness. We find
this by calculating the area under the curve created by the
stress/strain graph. Comparing PLA to ABS, we can see that although PLA
has a higher yield strength, the ABS graph has a greater volume under
the curve, meaning ABS has better toughness and can absorb more energy
before failing.&lt;/p&gt;

&lt;p&gt;While the stress vs strain graph is a great tool, the main problem with
comparing material properties from PLA vs ABS (in our case) is the
manufacturing method. FDM 3D printing does not create a solid block of
the printer material like injection molding would. One of the main
variables is the printer setting applied for the 3-D printed part. A
slicer program takes a 3D part in an STL format and cuts it up into
multiple layers depending on your printer settings. Then generates a set
of commands in gcode that tell the 3D printer how exactly to create the
part.&lt;/p&gt;

&lt;p&gt;FDM builds 3D parts from the bottom up (+z) so each ‘slice’ is in the XY
plane with a set layer height. Because of this, printed parts will have
a lower tensile strength along the Z axis compared to the X\&amp;amp;Y axes.&lt;/p&gt;

&lt;p&gt;To get a better visualization of the slicing process, with the solid
outline of your carabiner, click on the files dropdown in Fusion, select
export, and export your part as an STL file. STL’s are the file type of
choice for exporting 3D models since this file type takes your 3D model
and breaks it up into a multitude of triangles. Allowing for easy
scaling and processing inside a slicer.&lt;/p&gt;

&lt;p&gt;Cura Setup: After downloading, open Cura. The setup does ask you to
enter what 3D printer you are using the slicer for. Any of them should
work, I chose a Prusa i3. Drag and drop your STL file onto the build
platform. To orient the part flat on the build plate, select the part
and press R. In the menu that pops up, click the right most button to
align a face onto the build plate. Select one of the side faces and your
part should now be laying down flat.&lt;/p&gt;

&lt;p&gt;There are lots of specific print settings, but for now press slice with
the default print settings and go into the preview window (top center in
Cura). You will see two sliders, one on the bottom and one on the left.
The slider on the bottom controls the print linearly in time for a
specific layer. The slider on the right controls what layer is being
shown. For looking around the window, middle click to scan around,
scroll up/down controls zoom, and holding space then left clicking lets
you orbit.&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000005B3000003AE1A5AEF169465F55E.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Zooming in and pressing play, you can watch how the printer will go
about printing each layer, and how large each layer will be as the print
progresses. You can also see how different layers have different colors,
each color denotes a different type of line (clicking on the Line Type
will show what each layer means). The major components are Walls,
Infill, and Top/Bottom layers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Walls&lt;/strong&gt; generate as the perimeter for any part in a slicer. Adding
wall count increases how thick they are before the infill is generated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top/Bottom&lt;/strong&gt; layers generate on the top and bottom of parts. You can
control how many layers of each generate along with how thick they are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Infill&lt;/strong&gt; is what fills up all the internal space of a part not taken
up by walls or top/bottom layers. In a slicer, you can control what % of
infill will be generated, along with what infill pattern will be
generated. Different infill patterns have different strengths and
weaknesses depending on their geometry.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000000000000274000001D8EA574BDB64C84F15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://www.thingiverse.com/thing:4732170&quot;&gt;&lt;em&gt;Thingiverse&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction-to-stress&quot;&gt;Introduction to Stress&lt;/h1&gt;

&lt;p&gt;Now that the easy part of designing a carabiner is done, we need to make
the complicated part, the gate. But before we jump into that, lets apply
some of what we learned from the previous unit on the outline of your
carabiner. While carabiners have three main force ratings (the main
axis, with the gate open, and in the transverse direction) we will only
be looking at its maximum strength along the main axis with the gate
closed.
&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003C0000001F4E5B3D8F04ACEE689.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.weighmyrack.com/ensure-your-carabiner-is-strong-enough-to-climb-on/&quot;&gt;&lt;em&gt;Carabiner
Strengths&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s review the fundamental types of loading, before we find out what
the carabiner is experiencing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000000000002E500000196A45843B78505159F.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure _, &lt;a href=&quot;https://www.linearmotiontips.com/mechanical-properties-of-materials-stress-and-strain/&quot;&gt;&lt;em&gt;_The five fundimental types of loading
_&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at our carabiner, the loading on our carabiner is tension, and
the bending effect brought by the two sides wanting to become
perpendicular. While there will be some displacement from the carabiner
being pulled thinner, we will be focusing on the tensile strength.&lt;/p&gt;

&lt;p&gt;While the tensile strength of PLA is known, since we will be 3D printing
calculating the exact material properties is not exact. As not only will
your 3d print have different strengths along different axis (we will be
going into that below), but your 3D print will not be entirely solid.
Therefore, I will be making an assumption to save us from going in depth
on modeling the exact part as it’s 3d printed. I found a
&lt;a href=&quot;https://aip.scitation.org/doi/abs/10.1063/1.5085981?class=pdf&amp;amp;journalCode=apc&quot;&gt;&lt;em&gt;_paper_&lt;/em&gt;&lt;/a&gt;
where they tested 3D printed PLA and found the ultimate tensile strength
was 32.94 MPa (4777.5 PSI) with 80% infill. Which is about as solid as
you’d want to go for 3D printed parts. We will be using these numbers to
get a rough idea of how much force a carabiner can withstand without a
gate.&lt;/p&gt;

&lt;p&gt;Now we need the cross-section area of our carabiner, since tensile
strength is measured in psi (pounds per square inch). One side of an
example carabiner measures 0.2in * 0.2in = 0.04in^2 * 4777.5 psi =
191.1 lb. So, our theoretical maximum tensile strength for this
carabiner is 191.1lb * 2 (both sides) = 382.2lb.&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;anchor-7&quot;&gt;&lt;/span&gt;Designing the Gate&lt;/p&gt;

&lt;p&gt;Now, let’s work on the gate of the carabiner, the main purpose of the
gate is to allow a gap in the frame of the carabiner letting you attach
whatever is needed. While also having a mechanism to automatically
re-engage the gate once it has been opened (I will be referring to it as
the sprint return, but it doesn’t need to be a spring). Since we know
roughly how strong the frame itself is, the goal is to design a working
gate that can hold at least that much force. While we will be 3D
printing, let’s have a look at some common metal carabiner designs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100000000000026000000260613408D6BF7E5FC0.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100000000000022D0000022DBDDD89E7496BDFEC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hook                     Pin-Hook&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020000000165000001D018310D513816534B.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000000000001B8000001B8706BCB236E115943.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000000000001C8000001C83E2C032385157FE9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Screw-lock hook                      Screw-lock pin                   &lt;br /&gt;
       Wire Gate&lt;/p&gt;

&lt;p&gt;Looking at these designs, let’s look at each part of the carabiner’s
gate. They have a bottom pivot, a hook on the non-pivot side, some form
of spring to keep the gate closed (inside the bottom pivot for most
designs) and an optional gate lock.&lt;/p&gt;

&lt;p&gt;On a side note, while looking at the pins on some random carabiners I
had, I noticed that one was slightly more silver than the rest. A quick
touch with a bench grinder confirmed that the pin was actually made of
aluminum. Great example of why to NEVER use non-climbing rated
carabiners for climbing, or any other tasks involving suspended loads.&lt;/p&gt;

&lt;p&gt;Here, we will be dealing with shear stress (as noted above). Shear
stress is any stress that is acting parallel or tangential to a surface.
Let’s look at the most simplistic representation of shear, a single
shear plane. The formula for average shear stress (denoted here as &lt;em&gt;τ&lt;/em&gt;)
in a plane is&lt;/p&gt;

&lt;p&gt;&lt;em&gt;τ =&lt;/em&gt; F / A&lt;/p&gt;

&lt;p&gt;Where F is the resultant shear force acting on the pin from the plate.
And A is the area of the cross section.&lt;/p&gt;

&lt;p&gt;Plugging in the formula for the area of a circle since we are using
circular pins, &lt;em&gt;τ&lt;/em&gt; = F / (π*r^2). This formula is for normal shear
stress, since we are applying a force to a pin the way it transmits that
force onto the contact surface is called bearing stress. Bearing stress
is the contact pressure between separate bodies, and in our case is
between the plate and the pin.&lt;/p&gt;

&lt;p&gt;While not exact, the force distribution from this bearing stress on the
inside of a hole, and the resulting displacement will look something
like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100000000000031C0000022B17E2BFEDF37101C5.jpg&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100000000000030F000001E790135B4023F10A8F.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Un-deformed bearing load.                                Deformed
Bearing Load.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100000000000036C000002000CA3798CD33AABB7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Single Plane Shear&lt;/p&gt;

&lt;p&gt;Before we go onto the carabiner pin, let’s look at the simplest example
with a pin and a single shear plane. Where the force is spread out along
one cross sectional area of the bolt.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100000000000064000000394B62914ECADFFD6C7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Double Shear&lt;/p&gt;

&lt;p&gt;In a double shear scenario, there are 3 total plates creating two shear
planes within the pin resisting the shear force. So (as labeled in the
drawing) the average shear stress on each plane is equal to ½ of the
total force. Going back to our formula but for double shear.&lt;/p&gt;

&lt;p&gt;Going back to designing the gate, another design for the bottom pivot
and spring is using the PLA itself to act as the gate and pivot without
a separate part or pivots. This is usually done by making cutouts in the
lower part of the gate, using the elasticity of the material to make a
small spring section that is printed along with the frame in the same
print.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000037E0000029E10720D3B2ED468FB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000039B000002B4D075EBB626956ECA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the second design, the ‘spring’ section has match head shaped
cutouts, going part way through the width of the frame. The match head
shape of the cutouts is notable, since that shape helps to prevent
stress from concentrating in that area. Reducing the likelihood of it
cracking under use.&lt;/p&gt;

&lt;p&gt;To create a CAD design of the gate, there are two main paths. If you are
going to make a single part where the carabiner is printed in one go
(like the photo above), it would be easiest to keep everything in one
part. But for my example carabiner, I will be making a separate gate to
be assembled with a metal pin.&lt;/p&gt;

&lt;p&gt;Creating assemblies is the next major part of CAD design after creating
the parts themselves. Assemblies are where you take multiple parts, and
assemble them together virtually. You can also analyze how your
mechanism will move, check for interferences between parts, and run
simulations.&lt;/p&gt;

&lt;h1 id=&quot;creating-a-cad-of-the-gate&quot;&gt;Creating a CAD of the Gate&lt;/h1&gt;

&lt;p&gt;I will be breaking the CAD process down into a few major parts. Modeling
of the gate itself, modeling the pivot pin, Adding gate components to
the main Carabiner frame, then assembly of the gate and pivot pin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003A300000279E09EA287FA420108.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, I made a sketch of the main body will look like based on my
sketch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000022F0000037EAEA5C94330DCC2B2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, I extruded that sketch out to my desired length. Since I started
on the Top Plane, this extrusion is up along the Front plane, centered
on the +Z Axis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000118000003694F12E26BD2ED33C1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, I created another sketch on the surface of the body made in the
last step. The arc is a 3-point arc with the two end points being
horizontal to the sides of the first extrusion. Then the middle point of
the arc is constrained to the origin of the sketch. Making the arc
tangent with the side of the rectangle means the arc is now fully
defined without needing to add any dimensions. Meaning the arc will now
stay the same no matter how the width is changed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003420000027C06628FF72E4CA06B.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since this sketch needs to be a cut we select extrude like normal, and
change the operation to cut. Instead of setting a hard distance, I
selected the Extent Type to ‘All’ meaning the cut will automatically
extend to the farthest point of the solid body in front of the sketch
profile. Now, if we need to change the width of the body down the line
the cut will now automatically extend without needing to go in and
change any values.&lt;/p&gt;

&lt;p&gt;Next step is cutting out top and bottom of the gate to define where it
will connect with the main body of the carabiner, starting with the
bottom pivot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000032E0000024E4AD2E99764A67848.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I start the sketch on the right side of the body of the gate (aligned
with the right plane). For the sketch to create the cut outs for the
pivot, you can’t select or snap onto the curved section, since it’s not
in the sketch plane. Here, we use the ‘Intersect’ tool to convert
sections of bodies and pull them into your current sketch plane. This
tool is also quite useful, and does almost the same thing as the Project
tool except specifically for non-bodies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003EB00000259A75D9623E5A2D370.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003C9000001E777639E5B8EFAD8CD.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the intersect tool, then click on the curved portion of the gate
and hit OK. You should now see a pink outline of the square profile
extended onto the sketch plane.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000030D000002E329E755366915A024.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this cut extrude, I first added a construction line down the center
for mirroring. Then added a 2-point rectangle on the left side. I
entered a height, then mirrored the rectangle and added a final
dimension between the two rectangles. The cutout is finished by applying
a cut extrude, through all.&lt;/p&gt;

&lt;p&gt;Next is the cut out for the top hook, I decided to go with a simple
hook-and-pocket type design, with the pocket side being on the gate. The
main reason the pocket is on the gate has to do with print orientation.
Since the only real way the main body can be printed is on its side
(like we did before), if the pocket was on the body, it would have
support material inside. While the support material wouldn’t be too
annoying to take out in this case, I decided to avoid the problem
altogether since the gate can be oriented with the cut-out upwards
without any major downsides.&lt;/p&gt;

&lt;p&gt;First, we need this to line up with the hook part in the body of the
carabiner, so I’m going to get a rough sketch of what the hook will look
like. There are a multitude of ways you can go about designing an
interface like this, and I will be showing a good starting point for
design.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000013500000166127D325A7862A38C.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sketching on the front plane, I started by just laying out a rough idea
of what the middle should look like without adding any dimensions and
just dragging the (blue) non defined lines until a point where they are
roughly what seems right. Add in the dimensions that automatically show,
then making it an extrude cut and boom, we have a rough hook.&lt;/p&gt;

&lt;p&gt;Now, with the gate in an initial state, before we go too far let’s start
assembling them to see what they look like together. I usually like to
do this early in the design process before putting any finishing touches
or getting too fancy with my models. An important quote that has stuck
with me throughout my education in engineering is “Fail fast, and fail
early”. To that end, making a mock assembly early can help catch errors
as early as possible, so they can be fixed as easily as possible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000284000003A306349E2F5467477B.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opening the data panel, double click to open (or go back to) the main
body of your carabiner, then simply click and drag the gate into the
view window, your screen should look something like this. On the gate,
you will see three arrows and 3 arcs, the arrows will move the part in
X, Y and Z, and the arcs will rotate your part around the axes. Use
these controls to roughly alight the gate to the carabiner, and hit OK.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000163000002EC5C9D397D92A9F695.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And look at that, not too terrible. Now is where you might realize some
things you want to change, like for example the length and width is not
quite what I want.&lt;/p&gt;

&lt;p&gt;Next is the cut out on the body of the carabiner, leaving the gate as a
rough overlay I roughly cut away all the material except the area for
the bottom pivot. No need to be too exact since we will be going back
once the gate is locked in place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000001C80000039F0D728A4D57886CFA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next step is adding the pivot and clearance for the bottom pivot hole, I
did this in a single sketch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002E60000021770E6D0C7FD40CCC9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another quick note you might notice that when adding dimensions even if
the overall sketch is at an angle the dimension automatically measures
along the major axis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000035B000002C5520C6CA9815D2793.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To change the dimension to being along the actual length of the line,
after selecting said line put your cursor directly besides you line. It
may take some wiggling back and forth but you should see the dimension
switch to being aligned perpendicularly with the line.&lt;/p&gt;

&lt;p&gt;With both pivots in, the last part that needs to go in before we can
create a joint is the pin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000004D200000365408594B027775D51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For parts like these, there are two main ways to go about designing
them. First is creating the part section by section with individual
sections. The middle of the pin, the head of the pin, and then a fillet
to create the curved surface on the head of the pin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000004AD000002F44FE09488C7F34BC2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then mirroring the body to create the other side of the pin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000001A7000001AA7163C290DD994425.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The other method is creating the pin with a Revolve Operation. For a
Revolve extrude, instead of creating the pin with multiple separate
sketches and extrusions, you create it all in one operation by sketching
a 2D side profile of the pin, and revolving it around the centerline.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000458000001C08B95F03E1EA0BADD.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 1 would be making the simplest sketch of the profile, here we only
need to do ½ of the cross section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000004BD0000012FFA4B0278ACB9A7D7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mirror the sketch to create a closed chain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000004BD000002D1DF34930FD50F80C8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then revolve the profile around the central axis.&lt;/p&gt;

&lt;p&gt;Now that we have out pin, we can start assembling the bottom pivot of
the gate. As we’ve done before, drag and drop your part in and roughly
position in close to where you want it in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000018F00000198A231D44EDC07B5C6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For assembling parts, we will be using the Joint tool (Hotkey J). The
joint tool allows you to define how two bodies connect and interact with
each other.&lt;/p&gt;

&lt;p&gt;For each joint there are 7 joint types that define the motion in that
joint. These are Rigid, Revolute, Slider, Cylindrical, Pin-Slot, Planar,
and Ball. For the pin, I will first be using a rigid joint to join the
pin to the body of the carabiner.&lt;/p&gt;

&lt;p&gt;The Position tab is where you select where the joint will be located on
a specific part. The three modes are simple, between two faces, and two
edge intersection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple:&lt;/strong&gt; Creates a Joint Origin on a face, edge or point to align
components.&lt;/p&gt;

&lt;p&gt;**Between Two Faces: **Creates a Joint Origin to center a component
between two faces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Two Edge Intersection:&lt;/strong&gt; Creates a Joint Origin to align components to
the apparent intersection of two edges.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000038700000237CE058A8B480E2E1D.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In general, for creating joints you always want to apply the constraints
to the part that is the least likely to change down the line. So, for
the pin I chose the simple mode, and placed the part origin on the
origin of the pin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003E6000001E4E0A7A12F3EBF4699.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For Component 2 (the frame), I chose the in-between two faces option
since the center of the pin is centered between the two outer faces of
the frame. Here, Plane 1 and 2 are the main side faces of the body, and
‘Snap’ is what defines where the origin on component 1 will be located
between the two planes defined. I chose the Snap point to be the center
of the line between the two holes of the pivot.&lt;/p&gt;

&lt;p&gt;The origin symbol (the circle with the three colored lines for each
axis) should snap to the midpoint when you put your cursor over the
center of the hole (see above).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000481000002A93355E10B03A394E7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you will see the component move into place, and where you can add an
offset or angle of your part if desired. You can also change this by
dragging any of the arrows or the angle slider on the component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000255000001B70DBE97952B7D6AD8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To join the bottom pivot of the gate to the pin, the process is similar
except that we want the gate to be able to move. Therefore, we want the
‘Revolute’ joint, after adding the position (same as before) Fusion
will animate the gate spinning around the pivot. Left clicking and
holding lets you freely move around constrained parts, allowing you to
see how it would move in real life. You can also double click on the
Revolute Join symbol (the flag) to enter a specific angle.&lt;/p&gt;

&lt;p&gt;With the gate in place, it is now much easier to create the top hook by
positioning the hook to the needed position and sketching around it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003AB000002F20D89BEDAC93380C2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After creating the feature, now you need to check for interferences with
the rest of the carabiner. Here it is simple to tell it will interfere
without moving the gate. But stay with me, for more complicated geometry
it’s not as easy to see interferences. Moving the part to where you
think the interference is, and select the interference tool from the
Inspect tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002BC00000199BE914E7588FB4B71.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002A5000001B55A34C5EA80EE8A16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Selecting the bodies involved, and including coincident faces to check
they are actually coincident, we can compute the interference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003C0000002ABE10059254A9E7FED.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000349000002A0E0B079A4183057B9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The results box will list the interference(s) and their volume, along
with what components are involved. The interference can also be seen
colored on the model.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000001E700000223E39F41995A96DA73.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, with the major parts finished it is time to add in fillets. A
Fillet is the rounding of an exterior or interior corner of a part.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002420000028B1920767A49B556C5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With fillets there are also chamfers, they serve the same function as
fillets but they are angled instead of rounded.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000004FF000002A9D60B3D66ED50C26B.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fillets serve to reduce stress concentrations that are almost always
found at the corners of a part. Adding a fillet into a corner spreads
the stress from where it would be concentrated right at the corner to
being spread over the fillet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000592000002B85F6CCD441BD214FA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lowering the overall stress on the corner.&lt;/p&gt;

&lt;p&gt;Before creating fillets of chamfers for 3D printed parts, it is
important to keep the print orientation of your part in mind since the
strength of the fillet can vary.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000061500000316E1C8F15300760E87.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the fillet is horizontally aligned with the print bed, the fillet
itself will be printed as a single curve, the print head is able to
track the path of the fillet with one continuous line.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003B1000002B5D0DF1EB30086A5FF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But when the fillet is oriented to be vertically aligned to the bed,
when sliced the fillet is jagged (slightly exaggerated here with a 1mm
layer height), and compared to being aligned horizontally will not be as
strong (or look as nice).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000588000002E7A3AE9B3CBAFB6D77.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the fillet tool, after selecting the edges you want to fillet and
drag the arrow until you the fillet is the right size. For 3D printing I
usually don’t round to a fraction or a whole number like I would if the
part was going to be machined or made into a drawing for fabrication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000427000002D91203E3401A76973D.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of clicking OK and creating another fillet feature for the next
set you want to add, clicking on the + will add another selection set
allowing you to keep all your fillets organized. This is also why I save
adding fillet features until the end, since you can keep all the fillets
together in one feature.&lt;/p&gt;

&lt;p&gt;The Tangent Chain option is also helpful since it allows you to select
entire chains instead of selecting all the edges individually.&lt;/p&gt;

&lt;p&gt;By now, your model should be in a good shape. There are also other
features you can add like a specific appearance, or adding any branding
like your name or a logo to your model, but I will not be going into
that in detail.&lt;/p&gt;

&lt;h1 id=&quot;introduction-to-fea&quot;&gt;Introduction to FEA&lt;/h1&gt;

&lt;p&gt;FEA Stands for Finite Element Analysis, which is an analytical method
for solving complicated analysis in many fields of study from structural
analysis (what we will be doing) to fluid flow, heat transfer,
vibrations, etc. The basic idea of FEA is to break up a model into
small, manageable sections that can be more easily solved by a computer.
Which is great for us! Since trying to hand calculate forces on
structural parts can be quite tedious.&lt;/p&gt;

&lt;p&gt;While the computer will handle all the math for us, creating a
simulation that will generate useful information takes proper
preparation and setup. While FEA software built into programs like
Fusion 360 is great since it is easy to use, but a problem is the
concept of “garbage in, garbage out”. The idea that if you put in flawed
data into a logical processor (the FEA program, in our case) the output
will also be flawed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000017E00000118ED217C9748F6D8D3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The basis if FEA comes down to the elements themselves, and the nodes
that connect them. Depending on the exact geometry, the software will
calculate a new representation of your part made of elements and nodes.
&lt;a href=&quot;https://www.intechopen.com/chapters/39747&quot;&gt;&lt;em&gt;_Above_&lt;/em&gt;&lt;/a&gt;, we can observe
how some of the simpler elements are constructed, and the different
nodes they can be made of.&lt;/p&gt;

&lt;p&gt;This first FEA example will only be on the frame of the carabiner. I
will be going over the full carabiner FEA afterwards since that follows
almost the same process. But if this is your first time using FEA or CAD
software like fusion, there is a change the specific geometry of your
gate may give you errors in your simulation that may not be easily
solvable.&lt;/p&gt;

&lt;p&gt;I chose to go back to the simplest version of my carabiner, where I had
only drawn the outline and extruded it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000026600000039C132944914D48452.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scrolling through with the controls on the left (or the slider), go back
to the initial full extrusion of your carabiner. You can now use this
for your initial simulation without creating a new part file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000001D8000003A0CBBE4BDB217C1FE2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a good example of how the timeline is helpful, yours should look
something like this now.&lt;/p&gt;

&lt;p&gt;In Fusion, go to the design tab in the upper right and select simulation
near the bottom. When making a new study, Fusion has several different
simulation suites available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000000000005950000032B8C13E7ECF3EA0348.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Feel free to go through and read the description for each suite, but the
main study’s we will be considering are static stress, Nonlinear Static
stress, and event simulation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Even Simulation&lt;/strong&gt; studies are meant to find out how your model
responds to different factors like motion, impacts, and loads.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nonlinear Static Stress&lt;/strong&gt; studies are meant to determine the static
stresses and deformation throughout a model caused by the structural
loads and boundary conditions while considering nonlinear material
properties and large deformations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static Stress **is the most basic FEA study.&lt;/strong&gt; **Meant to analyze the
deformation and stress on a model from structural loads and constraints
while only calculating results assuming linear response from stress.&lt;/p&gt;

&lt;p&gt;One of the main advantages of Nonlinear studies is it give a more
accurate representation of real-world scenarios. Since many materials
are nonlinear (like elastic plastics), there are also nonlinear
geometry’s like for large deformations, and nonlinear kinematic
constraints.&lt;/p&gt;

&lt;p&gt;While both the Event Simulation, and Nonlinear Static Stress could be
used in our application to find the resulting forces on the carabiner,
we will be using Static Stress because of its simplicity, and ease of
setup.&lt;/p&gt;

&lt;p&gt;Now that we know we will be using, we will need to model our “rope” for
our simulation. Looking at our model, you might thing we can apply a
force going up on the top curve, and constrain the bottom of the
carabiner to be stationary. But simply applying constraints to the whole
inner surface of the carabiner will not accurately represent what is
happening when force is applied from a rope.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000007D00000047E14E2E902C49AA580.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To add this to our model, we will need to model two “ropes” and add them
to our assembly to apply the right conditions to our carabiner.&lt;/p&gt;

&lt;p&gt;My model rope was roughly 10cm in diameter and 1” long, with two square
tabs on the end. The width and addition of the square tabs was
arbitrary, but the diameter was what seemed to be a common size for
rope.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003B80000037C9F1C8EB0C6D1FF9F.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When applying the material for the rope, while we can create a custom
material that is rigid as I cover in the next section, I will be making
mine the in-built “steel” in Fusion’s material library since it will be
rigid for our use. You can also see that I modeled this part so the
origin is right in the middle of the part, taking the effort to place
the origin in a sensible spot will now come in handy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002860000039CED24E85A9127EB06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dragging in the model and boom, it’s already basically in the correct
place, no fiddling needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003FA00000326B3474EB339548CD3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After dragging in two “ropes” (or the puller as I named it) roughly
align them with the Move/Copy tool until they are roughly in the correct
place. Now we need to apply joints to keep them in place and not be
accidentally moved. I applied a rigid joint to both the top and bottom
pullers, and moved them until they were as tangent as possible to the
inside of the top curve.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000001EF000003A6E9C8E0344C65C7A2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to make the physical material of the carabiner PLA, but we
run into a problem. Fusion 360 lacks PLA in their default materials
library, and the additive material library. But going beyond that, we
want our study to specifically apply to 3d printed parts. And as we went
over earlier in the Introduction to 3d Printing unit, each print will
vary depending on print settings and orientation. While in the future
there will probably be some way to slice a part and do FEA on the
virtual print file, for now we will account for this discrepancy by
looking at available research.&lt;/p&gt;

&lt;p&gt;MIT has a comprehensive paper on PLA
(&lt;a href=&quot;https://dspace.mit.edu/handle/1721.1/112940&quot;&gt;&lt;em&gt;_https://dspace.mit.edu/handle/1721.1/112940_&lt;/em&gt;&lt;/a&gt;).
All the required mechanical values can be found in table 1. Don’t forget
to check your units when adding them in (1 MPa = 1 N/mm^2 = 1
kg/m*s^2).&lt;/p&gt;

&lt;p&gt;In the “SOLID” tab, click on “MODIFY” and open “Manage Materials” near
the bottom of the drop down.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000014E000002316552B3417385785A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the Material Browser, click on the circle icon with a + mark on the
lower left corner of the window, then click “Create New Material”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002140000026873D038BC7C1D1978.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the window go into the ‘Fusion 360 Material Library’, click on
plastic and find ‘ABS Plastic’, then add the material to the editor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000232000001F863CC724E9C72B914.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Close the window, and you will now see the ‘Identity” “Appearance’ and
“Physical’ tabs on the left of the window. Fill in the required values
in the physical tab, and fill out the Appearance and Identity tabs.
Don’t forget to list the source URL so you will know where these
values came from if you go back in the future. You can also edit the
materials appearance and other properties here. The material should now
show up in your favorite tab, so we can apply it and move on with our
simulation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000436000002364D698192EE479AC0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the materials applied, we need to move onto adding constraints to
our study. Fusion gives us several tabs for adding information into our
simulation before we can run it. Opening Load Case1, consisting of loads
and Constraints.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000019C0000029E6C6FA75E4B0C5D5C.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, we need to constrain our model, in the Display tab, click on the
DOF View button in the middle. This is the DOF or Degree Of Freedom view
for our study. You will see that all of our bodies in the study are
currently free.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000019B000000ED109C3F29988992B4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For our study, the lower puller will not be moving. Click on
‘Constraints’ in the tool bar and add a structural constraint (Also in
the modeling tree, or hotkey C). There are 5 constraints to choose from,
but for this study we only need Fixed, and Frictionless constraints.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003920000032BCF93DA1A38F02D06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003F9000002E72FE5B54E4DB67776.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the bottom faces of the carabiner puller, it will now be fully
fixed in place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003300000026D0A649CAE1547B170.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to constrain the upper puller. Since this part will be
sliding upwards, simulating a rope pulling the top of the carabiner, we
need to use the ‘Frictionless’ constraint. Select only the outer x and y
faces of the puller and click ok. These constraints mean that the puller
can now only move up and down, in a virtual “Channel” crated by the
outer faces of the puller. There should also be a frictionless
constraint applied to the two main faces of the carabiner to prevent
side to side movement.&lt;/p&gt;

&lt;p&gt;With our structural constraints in place, and before we apply our loads,
we need to create a contact set. A contact set is basically a way to
identify a relation between two parts and how they interact with each
other. Right click on ‘Contacts’ and select ‘Manual Contacts’. (There is
also an automatic contacts tool, but since we only have two doing it
manually is fine).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000046F00000307C1AA9C5489E6CDCD.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the primary body as the carabiner, and the secondary body as the
top puller. Selection set 1 is the area they interact, the inside face
of the carabiner here. Selection set 2 is just the round face of the
puller.&lt;/p&gt;

&lt;p&gt;With everything selected, you will see the rest of the menu open for
defining the contact type. There are 5 types of contacts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonded&lt;/strong&gt; - Describes geometry as being welded or glued or otherwise
permanently fixed. No penetration, no separation, bodies cannot slide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Separation&lt;/strong&gt; - Describes geometry that is separated, but does not
slide, such as the gap between a fastener and a hole. No penetration,
separation is possible, bodies cannot slide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sliding&lt;/strong&gt; - Describe geometry that can slide, but does not separate,
such as scissors, pliers, a vise jaw, or mechanical arm. No penetration,
bodies can slide.&lt;/p&gt;

&lt;p&gt;**Rough **- No penetration, separation is possible, bodies cannot slide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Offset Bonded&lt;/strong&gt; – Same as bonded except the bodies are offset.&lt;/p&gt;

&lt;p&gt;For the contact between the carabiner and the puller, there is no
penetration, and the geometry should be bonded along that face for the
entirety of the simulation. So, the Bonded joint is what should be
applied and we can leave the penetration type as symmetric. The other
settings can be left alone. Click ok to create the contact, then repeat
the same process for the lower puller.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000003C90000021DE2024B3B6DDEC5AD.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking edit on the contacts section in the tree, we can see the two
contacts and where they are applied. The contacts can also be edited
here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000568000002C5EE6528942D548A18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adding structural loads is the next step, structural loads fall into
seven main categories.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002F300000237180A489C0B5A8B3C.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we will be ‘pulling’ the puller upwards, we will use a force. Go
to loads, create a new structural load (Hotkey L) and select force as
the type. The target is the two faces on top of the puller, with the
force’s direction being upwards. At this stage, the load is fairly
arbitrary as we will be changing it and running multiple simulations.
Other simulation types are capable of applying force until failure for a
certain load, but for a static stress simulation we need to enter a
value. Try and make your best estimate about how much it should hold and
you can see how close you are.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000027600000343F3A6D5F3FC62577A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Going back to the Degree of Freedom Tool, make sure everything is green
and fully fixed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000017500000335B2F1B5B82BB8EE9E.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your simulation is fully set up! Now it’s time for the fun part,
meshing and running the study. Right click on mesh and select Mesh
Settings, I usually have the slider around the middle for the first run.
After clicking ok, right click on Mesh again and select generate mesh,
your part should now look something like this.&lt;/p&gt;

&lt;p&gt;We can now click the Pre-check icon, on the left side of the solve
section. Everything should be good, but if not address the warnings
shown. Choose the run locally option in the run simulation tab. Running
your simulation on the cloud will take longer than running it on a semi
modern laptop (I am running a Lenovo Laptop from 2018, 8000 series i7)
and also takes cloud credits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002560000031E7110E97C7D8DD568.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Finally, we can run our study. This shouldn’t take too long
depending on your hardware. Once your simulation has finished, it will
probably look something like this. The default graph to show is the
safety factor, and clearly the force I chose was well under the failure
point.&lt;/p&gt;

&lt;p&gt;Safety factor is a measure of how much stronger a design is compared to
its working load. Calculated by Stress to Fail / Stress Applied. For
example, structural steel in buildings typically has a safety factor of
4-6.&lt;/p&gt;

&lt;p&gt;With our results, we need to conduct a reality check on our findings.
Fusion creates six plots for a Static Stress simulation. Safety Factor,
Stress, Displacement, Reaction Force, Strain, and contact pressure. For
our study, we are mainly concerned with Stress, Safety Factor, and
Displacement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002AA00000364018189614649A071.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Under Load Case1 by the colored graph, click on the box below and select
stress in the drop down. You should now see a max and a min stress in
MPa, if not click on the inspect tab on the top toolbar and select “Show
Min/Max”. We also need to toggle the mesh visibility so we can see it,
click on the icon above ‘Display’ on the tool bar. You should now see
the stress plotted on your carabiner along with the mesh.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002B800000369168386E7CCEC5575.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this stage, I took a close look at the stress on the pullers to make
sure nothing is out of the ordinary. Since the stress on them was
basically 0, and the stress pattern looked correct, I hid the upper and
lower pullers along with the symbols showing the constraints by clicking
the eye icon in the model tree. They are no longer required for the
study, and block us from seeing the whole carabiner.&lt;/p&gt;

&lt;p&gt;During this stage in our study, the main goal is to evaluate your study
and make sure there are no obvious discrepancies from your simulation.
And making sure your results are aligned with that would happen in the
real world. Everything depends on your specific carabiner’s geometry,
but I will lay down some basic guidelines.&lt;/p&gt;

&lt;p&gt;Look at your maximum and minimum stress. Do the values make sense? Are
the numbers in the correct order of magnitude? Significantly
lower/higher than you expected? You also need to look at the location of
the maximum and minimum stress, along with any other locations with
stress concentrations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/1000020100000306000003A76FFA573A68F138D6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fusion 360 gives us an amazing tool for visualizing this. If you click
on the colored slider to the right, you should see two arrows at the top
and bottom. These arrows allow you to only see parts of your model with
the corresponding range of stress, helping narrow down stress
concentrations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002A900000331199F22019AC9CF93.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my model we can see that the max stress is 6.1 MPa, or 885 psi, with
an applied load of 40N (9 lbf), Seems reasonable for my load. We can
also locate the main stress concentrations, at the top and bottom where
the puller is connected, and at the sides of the upper loop. This is a
good time to use the lower slider starting at the max stress level and
going down, giving you a good idea of how the stress propagates through
your carabiner.&lt;/p&gt;

&lt;p&gt;Since my first load was clearly too low, I moved up to 120N and ran the
simulation again. It might take some trial and error, but you want to
hone in on a safety factor of 1. Meaning the force applied is just about
what would make it break.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002A000000358EF8049B0D38F8879.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s change the results viewer to view the displacement, the default
view is Adjusted displacement. Adjusted just means that the program has
made the displacement more dramatic to better show how your model is
deforming. Adjusted displacement multiplies the actual displacement by&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The actual displacement should be somewhat low.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, change the viewer to show the safety factor. This view
basically just takes the stress plot and divides the stress at each
point by the failure point. So, if the material fails at 30 MPa, at a
point with 30 MPa of stress the safety factor would be 1.&lt;/p&gt;

&lt;p&gt;Go through the same steps outlined before about checking the simulation
for errors and allows for better force averaging. In your previous
studies, you might have noticed that your maximum stress was just along
one mesh connection. With a finer mesh, the increase in cells allows for
structural loads to average over multiple mesh nodes, leading to more
accurate results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000064F000002F225E4681E60417E3F.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, we can see a clear case of where force averaging has not been
achieved, leading to imprecise results. The part itself is the same
along the X axis, the force is being applied evenly across the entire
top face of the part, and the entire bottom face is fixed. Looking at a
cross section along the X plane, the cross section is the same, meaning
that the resulting stress should be in an even line across the entire
part. Instead, the maximum stress is being located only in the middle of
the boundary of the mesh cells.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000006F10000030F73273D51CEB2BC23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Increasing the mesh, the stress how forms a distinctive line as we would
expect (Although I have gone a bit overboard jumping from 1000 nodes to
over 400,000).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000024A000002612CB6DDE4B11F5165.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Other than manually lowering the size of your overall mesh, you can also
apply local meth controls. Applying mesh control is where you manually
set specific areas of the most importance to have a higher mesh, while
leaving the mesh in non-critical areas larger.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002FF000003BDBAADB13CC08171C0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After selecting the local mesh control tool, I selected the curved faces
on the top and bottom of the carabiner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002EB000003C6A8DCAD769E51D5BB.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
After applying mesh control&lt;/p&gt;

&lt;p&gt;Now, you should have all the data you need to analyze your design and
make changes if needed. In areas with stress concentrations, try adding
more material or changing the geometry of your part (adding/enlarging
fillets, shortening connections to make the model stiffer, changing the
geometry of high stress areas to better resist the load). For areas with
very low stress, you might be able to safety remove material by creating
pockets to add weight in other sections.&lt;/p&gt;

&lt;p&gt;For iterating your design, Fusion makes it easy to switch from the
simulation window back to the simulation window. Depending on how
drastic your changes are, you should be able to directly update your
simulation, create a mesh of the new design and run it without making
any changes to the simulation settings themselves. You can also easily
scroll through your iterations on the timeline to compare the first
iteration to a updated version.&lt;/p&gt;

&lt;h1 id=&quot;fea-on-the-gate&quot;&gt;FEA on the Gate&lt;/h1&gt;

&lt;p&gt;Going back to the design tab, you can now move to your finalized model
of your carabiner with your gate. The simulation setup will be the same
as before, except we now need to define all of the contacts for the gate
itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000002A200000266CF65FF860D3BC043.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For my gate, that entailed adding bonded contacts where the gate
connects with the frame of the carabiner. Along with the contact between
the frame, the gate, and the pin.&lt;/p&gt;

&lt;p&gt;Since the pin and gate were added, the frictionless constraint should be
applied to the sides of them like before to prevent side to side
movement.&lt;/p&gt;

&lt;p&gt;The pin also needs to be defined as a pin joint in the Constraints
section.&lt;/p&gt;

&lt;p&gt;Also, if your model includes a spring or separate part for closing the
gate you should consider removing it from the simulation if it does not
play a role in the structural stability of the carabiner.
&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000015E000003AFEDE2DA5817CD0678.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before running, check your setup using the DOF as well as the groups
tool. In the group view, parts that are not in a group (I.E. not
constrained correctly) appear grey and will need to be constrained or
the simulation will fail.&lt;/p&gt;

&lt;p&gt;Since the full carabiner has more parts and is more complicated, the
simulation will take more time to fully solve than before.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/10000201000004B7000002EFAC7E4FE8A196ABA5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After running my simulation, the failure point is in a similar area as
before, with the maximum stresses being near the upper loop. There is
also a buildup of stress in the hook itself, but it seemed to hold up
slightly better than the rest of the carabiner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/TensileTester/100002010000043300000299B9416E086E25965C.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also observe how the stress concentrates along the fillets at the
bottom of the gate as the carabiner is pulled upwards and deforms.&lt;/p&gt;

&lt;p&gt;I hope that my tutorial has been helpful to you. Best of luck.&lt;/p&gt;</content><author><name></name></author><category term="project" /><summary type="html">Designing a Carabiner Project Information Description: Students will follow along with a tutorial and learn to design a 3D printable carabiner in CAD and then use FEA to analyze the performance of the design under stress. Students will use the insights gained from FEA to improve the strength and performance of their design. https://awkinley.github.io/IQP-Project-Website/ Learning outcomes: Students will understand how stress affects 3D printed parts. Students will know the basics of how FEA can be applied to part design. Students will know what FEA is and its applications to mechanical engineering. Students will better understand how to apply their knowledge of mechanical stress to part design. Students will be able to use FEA to study part stresses. Estimated Time: 5 hours or Less (Depending on previous knowledge) Note: What students will need: A computer with CAD that has a FEA Package (Fusion 360 is used in this tutorial) ## Introduction Project Goal The goal of this project is to introduce part design, design optimization using FEA (Finite Element Analysis), design for manufacture, and iterative design. Giving examples of how to apply those skills to a carabiner, then challenging them to design their own carabiner. Prior knowledge This tutorial is designed for using Fusion 360. This tutorial is not designed to be a replacement for a more comprehensive introduction to Fusion 360 course, but I will be walking through everything at a basic level. Fusion 360 is not the only CAD program you can use along with this guide. These concepts will translate to most programs on the market with a little know-how. Needed Programs CAD+FEA: Fusion 360 (or your choice) Slicer: Cura (or your choice) Designing a Carabiner Let’s start designing a carabiner. Like most CAD projects, it is almost always best to start with a hand drawing of what you want your part to look like before you do anything on the computer. Hand drawings are a good way to quickly get your ideas down without needing dimensions or a detailed idea of what it will look line. First, we need to understand the form and function of a carabiner, and the problem they are meant to solve. Like anything in engineering, before anything goes down in paper or CAD, the engineer needs to have a solid fundamental understanding of what they are designing. As these will be the guiding principles in how the part (piece, system, etc.) will be formed. Whether it’s as simple as a carabiner or as complicated as a satellite, a solid understanding of the basics is the foundation for how engineers are able to do their jobs. Function is the purpose of your design, the specific technical operations performed. As well as the reason you are building the product. Form is the finalized structure of the device, product, and is the culmination of how the function is achieved. A standard carabiner is simple, and you probably have one lying around to look at as an example. The main function of a carabiner is to securely join different components together. These components usually come in the form of rope, cables, straps, pins, or other fixtures. The main feature of a carabiner that separates it from other types of shackles is an easily operated gate, allowing quick connecting and disconnecting of components. With the function in mind, we can jump right to the form since carabiners have been around for a long time. You probably have one laying around to look at. Next, it’s time to jump into a rough sketch. These are always the beginning of creating CAD designs. For this example, I aimed to include a few key parts. The first of which are what views you want, views in engineering drawings are how a three-dimensional part is broken up into 2-D drawings. Example of engineering views The front view should always be the view that shows the most detail of the part. For most parts you would want to include more views, or even an orthographic view (3-D), but since a carabiner is simple we only need one view to convey the main shape and functions of the carabiner. In the sketch itself, another important feature it needs is noting rough dimensions, position of the gate, and also noting the radii of corners, and other features like the direction of motion I decided to go with a simple pear shape over something like a ‘bent’ frame for simplicity. I will be going over the gate in more detail later, but I threw in sketch of that as well. But whatever you have, let’s get out first sketch down in CAD. CAD Introduction See Here for Link to download Fusion 360 if you do not have it already. Create an account using your school email and fill out the required information. You may need to submit your school ID to get a educational license. After opening Fusion 360, you should see a screen similar to this. On the left side is the “Data Panel”, where you will see projects, create folders, save parts, and other features like sharing files with others. On the right side of the screen is the Design Workspace, the virtual space where parts and assemblies are created. You should see a “Untitled” in the tab near the top of the window. Also along the top of the screen is the workspace, clicking on the down arrow nest to ‘Design’ will show all the available workspaces. Each workspace has a different function, feel free to explore each of these. For this section, we will only be using the Design workspace. To the right of the workspace dropdown is the different toolbars available. The Solid is for solid modeling, and what we will be focusing on for our case. Double click on “Default Project” and create a new folder for your Carabiner. Once inside that folder, click save on the untitled part, give it a name and click save. Now, we can start modeling. There are a wide range of different tools inside Fusion 360, and as such there are a multitude of different ways you can go about modeling your carabiner. To start I will be going over a simple extrusion, a straight forward method for you to start learning the methodology for creating parts. To start, click on the “Create Sketch” Button to enter sketch mode. After clicking, the center of the design window will show you the different planes (X Y and Z) you can choose to sketch on. The white dot in the middle is the origin. To see what each plane is called (Aka named view) look at the view cube in the upper right side of the screen. After clicking on the plane you want, you will be automatically oriented to perpendicular to the plane. Once here, you will see the “Sketch” toolbar appear across the top of your window. In this toolbar, you can create the features that make up your sketch. The sketch tool works similarly to sketching by hand, you can create lines, circles, rectangles, and other features one by one and combine them together to create your final sketch. Click the arrow next to Create, and mouse down over the different options. Hovering over each provides a short description of how to use it and can save you lots of time. Looking at my sketch, I started off by adding some construction geometry. Construction geometry, denoted by a dashed line, is treated like any normal sketch but is only there to help you better define the rest of your sketch. Clicking on the line tool (Hotkey L), first click on the origin, then move your cursor up a little bit, hovering near the green line (denoting the Y axis) your second point should ‘Snap’ to being vertical. Before clicking to confirm placement, move your mouse to the left and right. When snapping to a grid or line, you will notice that a small blue symbol pops up to the side of the line. This symbol is a constraint that is automatically applied when snapping, a vertical constraint in this case. Constraints can also be added later down the line, click somewhere on the side so the line isn’t snapped vertically. After placing, click on the line (highlighted blue) and then click on the “Horizontal/Vertical” constraint. Fusion will apply the Horizontal or Vertical constraint to whatever orientation the line is closest to. Holding control while selecting a specific part of a sketch allows you to apply constraints to different sketch components together. After your line is placed, we need to make is construction geometry, to do this click on the line and press x (Hotkey for changing to/from construction geometry). Your line should now look like the photo above. You will see that the line is black, but with a white circle on one end. The black color means that the line is geometrically constrained (Fixed to the origin, and Vertical), while the white circle on the second point means that the length of the line is not constrained (whereas a light blue line means it is not geometrically constrained). To fully constrain the line, click on the “Sketch Dimension” tool, click on the line, move the dimension note off the line slightly so you can see it. Finally, enter a dimension into the box and press enter. Congrats! You have now created a fully defined line. For creating the rest of the sketches for your carabiner, you should follow the same strategy. Let me go through how I did this for the outline. First, I placed a center line, with two circles on either end. Then I added dimensions that seemed appropriate. Next, I placed one free line on the left side of my carabiner (free meaning not snapped to anything) that’s long enough to overhang both of my construction circles. Then, I made the free line tangent to both circles so they would connect at the right spot. After that, I used the “Trim” tool in the Modify section of the sketch toolbar (scissor icon in the middle). The trim tool is quite useful, it allows you to drag across unwanted parts of a sketch. It also automatically deletes the part from where you dragged to the nearest node. So here, the trim tool automatically cut down the hanging end of the line so it now terminates at the point where it contacts the construction circles. After that, I used the mirror tool to mirror the cut line across to the other side of the carabiner. The mirror tool (found in the Create section of the toolbar) allows you to mirror any objects over a mirror line. Symmetry is your friend, and you should use it whenever possible so you don’t need to go through and do any more work than you need to. The mirror tool is also time efficient and can be used for solid bodies as well. After confirming, you will also see new constraint symbols show up on your sketch. If you do not know what a constraint is, click on the symbol and look for the text in the lower right corner of the screen. This can be useful for checking what exactly the symbol means, and when you click on one constraint symbol the others in the set of constraints will also become bold. You can also click on any other part of your sketch (Point, line, circle), and it will tell you what it is, and it’s dimensions in the lower right. Now, I used the trim tool again to cut out the internal radii from the construction circles to create an arc, then make those arc’s back into a solid state by selecting them and pressing x. You will now notice that the interior of the sketch has changed color, this means that the external sketch area is now officially a closed loop. Meaning that the interior is fully closed in, and we can now use Solid tools to create a three-dimensional object with said sketch. Now that we have our final outline, we can use another handy tool to save us some time. To the left of the Trim tool is the Offset tool, letting us automatically create the same sketch as we just did but larger/smaller. Finally, we can create this sketch into a three-dimensional part. Selecting the “Solid” Tab, then select the extrude button (left of the sketch button). Then clicking on the outer profile, we can extrude this sketch outwards. Another handy tip for entering dimensions is that Fusion can automatically do math for you. Here, I just entered in 3/8 as a fraction and it will automatically change the dimension to 0.375. But you can also enter equations like (3/8)+(0.677*0.25) and (correctly formatted) it will do the math for you as well as save your equation so you can go back and change it without doing the math again. A place you should always use this is making a dimension larger/smaller for a specific tolerance. You can type in ((3/16)+0.03), and go back to change the added 0.03 without needing to remember what the original dimension was. Now you should have some form of a solid body, and now you should see that inside the Bodies tab in the upper left. You will also see the extrude and a sketch symbol in the lower left corner of the window, along with something that looks like a video. This bar is the timeline, and one of the most useful tools in Fusion 360, the timeline records the sketches, extrusions, and other operations you make in your model. Clicking on the symbols will highlight them in the view window and in the document tree (upper left drop down menus), you can also double click (or right-click) on a specific symbol to edit that feature. ## 3D Printing 3D printing and specifically FDM is a form of additive manufacturing that can turn part files into finished parts using a variety of materials. FDM stands for Fused Deposition Modeling, creating parts by putting down material layer by layer until a 3D part is formed. With each layer being a cross-section of the chosen part file. _3D Printer Close Up_ As a whole, you can 3D print out of materials from sugar to Kevlar, but we will be focusing on PLA and ABS. The two very common materials to print with. PLA is a thermoplastic polymer usually made from corn starch. PLA’s advantages are its low cost, ease of printability and good strength. ABS is another low-cost thermoplastic widely used in 3D printing along with injection molding. With better impact resistance and wear resistance than PLA. With the main disadvantage of being harder to print due to higher temperatures and increased warpage. One of the most useful ways to gain a better understanding of different materials is by looking at the stress-strain curve. Showing the relationship between stress (σ), representing the amount of force the material is under per cross sectional area, measured in lb/in^2 or N/m^2. And axial strain ε, representing how much the material has changed in shape under a certain stress, measured in change in length (ΔL) / original length. Figure X, Stress-Strain graph for low carbon steel Figure _; ABS vs PLA Stress-Strain Graph From these two graphs, what can we tell about these materials? The region from the start to the first peak is called the elastic region. We can see that comparing PLA’s graph to ABS, PLA has a steeper slope before the yield point. The slope of this line is the Young’s modulus E, representing the relation between tensile stress σ, and axial strain ε (E = σ/ε). So, looking back to the graphs of PLA and ABS, we can see that PLA is stiffer, and has a higher yield strength. But this is not the whole story, since with this graph we can also measure the energy absorbed by the material, known as toughness. We find this by calculating the area under the curve created by the stress/strain graph. Comparing PLA to ABS, we can see that although PLA has a higher yield strength, the ABS graph has a greater volume under the curve, meaning ABS has better toughness and can absorb more energy before failing. While the stress vs strain graph is a great tool, the main problem with comparing material properties from PLA vs ABS (in our case) is the manufacturing method. FDM 3D printing does not create a solid block of the printer material like injection molding would. One of the main variables is the printer setting applied for the 3-D printed part. A slicer program takes a 3D part in an STL format and cuts it up into multiple layers depending on your printer settings. Then generates a set of commands in gcode that tell the 3D printer how exactly to create the part. FDM builds 3D parts from the bottom up (+z) so each ‘slice’ is in the XY plane with a set layer height. Because of this, printed parts will have a lower tensile strength along the Z axis compared to the X\&amp;amp;Y axes. To get a better visualization of the slicing process, with the solid outline of your carabiner, click on the files dropdown in Fusion, select export, and export your part as an STL file. STL’s are the file type of choice for exporting 3D models since this file type takes your 3D model and breaks it up into a multitude of triangles. Allowing for easy scaling and processing inside a slicer. Cura Setup: After downloading, open Cura. The setup does ask you to enter what 3D printer you are using the slicer for. Any of them should work, I chose a Prusa i3. Drag and drop your STL file onto the build platform. To orient the part flat on the build plate, select the part and press R. In the menu that pops up, click the right most button to align a face onto the build plate. Select one of the side faces and your part should now be laying down flat. There are lots of specific print settings, but for now press slice with the default print settings and go into the preview window (top center in Cura). You will see two sliders, one on the bottom and one on the left. The slider on the bottom controls the print linearly in time for a specific layer. The slider on the right controls what layer is being shown. For looking around the window, middle click to scan around, scroll up/down controls zoom, and holding space then left clicking lets you orbit. Zooming in and pressing play, you can watch how the printer will go about printing each layer, and how large each layer will be as the print progresses. You can also see how different layers have different colors, each color denotes a different type of line (clicking on the Line Type will show what each layer means). The major components are Walls, Infill, and Top/Bottom layers. Walls generate as the perimeter for any part in a slicer. Adding wall count increases how thick they are before the infill is generated. Top/Bottom layers generate on the top and bottom of parts. You can control how many layers of each generate along with how thick they are. Infill is what fills up all the internal space of a part not taken up by walls or top/bottom layers. In a slicer, you can control what % of infill will be generated, along with what infill pattern will be generated. Different infill patterns have different strengths and weaknesses depending on their geometry. From Thingiverse Introduction to Stress Now that the easy part of designing a carabiner is done, we need to make the complicated part, the gate. But before we jump into that, lets apply some of what we learned from the previous unit on the outline of your carabiner. While carabiners have three main force ratings (the main axis, with the gate open, and in the transverse direction) we will only be looking at its maximum strength along the main axis with the gate closed. Carabiner Strengths Let’s review the fundamental types of loading, before we find out what the carabiner is experiencing. Figure _, _The five fundimental types of loading _ Looking at our carabiner, the loading on our carabiner is tension, and the bending effect brought by the two sides wanting to become perpendicular. While there will be some displacement from the carabiner being pulled thinner, we will be focusing on the tensile strength. While the tensile strength of PLA is known, since we will be 3D printing calculating the exact material properties is not exact. As not only will your 3d print have different strengths along different axis (we will be going into that below), but your 3D print will not be entirely solid. Therefore, I will be making an assumption to save us from going in depth on modeling the exact part as it’s 3d printed. I found a _paper_ where they tested 3D printed PLA and found the ultimate tensile strength was 32.94 MPa (4777.5 PSI) with 80% infill. Which is about as solid as you’d want to go for 3D printed parts. We will be using these numbers to get a rough idea of how much force a carabiner can withstand without a gate. Now we need the cross-section area of our carabiner, since tensile strength is measured in psi (pounds per square inch). One side of an example carabiner measures 0.2in * 0.2in = 0.04in^2 * 4777.5 psi = 191.1 lb. So, our theoretical maximum tensile strength for this carabiner is 191.1lb * 2 (both sides) = 382.2lb. Designing the Gate Now, let’s work on the gate of the carabiner, the main purpose of the gate is to allow a gap in the frame of the carabiner letting you attach whatever is needed. While also having a mechanism to automatically re-engage the gate once it has been opened (I will be referring to it as the sprint return, but it doesn’t need to be a spring). Since we know roughly how strong the frame itself is, the goal is to design a working gate that can hold at least that much force. While we will be 3D printing, let’s have a look at some common metal carabiner designs. Hook Pin-Hook Screw-lock hook Screw-lock pin Wire Gate Looking at these designs, let’s look at each part of the carabiner’s gate. They have a bottom pivot, a hook on the non-pivot side, some form of spring to keep the gate closed (inside the bottom pivot for most designs) and an optional gate lock. On a side note, while looking at the pins on some random carabiners I had, I noticed that one was slightly more silver than the rest. A quick touch with a bench grinder confirmed that the pin was actually made of aluminum. Great example of why to NEVER use non-climbing rated carabiners for climbing, or any other tasks involving suspended loads. Here, we will be dealing with shear stress (as noted above). Shear stress is any stress that is acting parallel or tangential to a surface. Let’s look at the most simplistic representation of shear, a single shear plane. The formula for average shear stress (denoted here as τ) in a plane is τ = F / A Where F is the resultant shear force acting on the pin from the plate. And A is the area of the cross section. Plugging in the formula for the area of a circle since we are using circular pins, τ = F / (π*r^2). This formula is for normal shear stress, since we are applying a force to a pin the way it transmits that force onto the contact surface is called bearing stress. Bearing stress is the contact pressure between separate bodies, and in our case is between the plate and the pin. While not exact, the force distribution from this bearing stress on the inside of a hole, and the resulting displacement will look something like this. Un-deformed bearing load. Deformed Bearing Load. Single Plane Shear Before we go onto the carabiner pin, let’s look at the simplest example with a pin and a single shear plane. Where the force is spread out along one cross sectional area of the bolt. Double Shear In a double shear scenario, there are 3 total plates creating two shear planes within the pin resisting the shear force. So (as labeled in the drawing) the average shear stress on each plane is equal to ½ of the total force. Going back to our formula but for double shear. Going back to designing the gate, another design for the bottom pivot and spring is using the PLA itself to act as the gate and pivot without a separate part or pivots. This is usually done by making cutouts in the lower part of the gate, using the elasticity of the material to make a small spring section that is printed along with the frame in the same print. Looking at the second design, the ‘spring’ section has match head shaped cutouts, going part way through the width of the frame. The match head shape of the cutouts is notable, since that shape helps to prevent stress from concentrating in that area. Reducing the likelihood of it cracking under use. To create a CAD design of the gate, there are two main paths. If you are going to make a single part where the carabiner is printed in one go (like the photo above), it would be easiest to keep everything in one part. But for my example carabiner, I will be making a separate gate to be assembled with a metal pin. Creating assemblies is the next major part of CAD design after creating the parts themselves. Assemblies are where you take multiple parts, and assemble them together virtually. You can also analyze how your mechanism will move, check for interferences between parts, and run simulations. Creating a CAD of the Gate I will be breaking the CAD process down into a few major parts. Modeling of the gate itself, modeling the pivot pin, Adding gate components to the main Carabiner frame, then assembly of the gate and pivot pin. First, I made a sketch of the main body will look like based on my sketch. Then, I extruded that sketch out to my desired length. Since I started on the Top Plane, this extrusion is up along the Front plane, centered on the +Z Axis. Then, I created another sketch on the surface of the body made in the last step. The arc is a 3-point arc with the two end points being horizontal to the sides of the first extrusion. Then the middle point of the arc is constrained to the origin of the sketch. Making the arc tangent with the side of the rectangle means the arc is now fully defined without needing to add any dimensions. Meaning the arc will now stay the same no matter how the width is changed. Since this sketch needs to be a cut we select extrude like normal, and change the operation to cut. Instead of setting a hard distance, I selected the Extent Type to ‘All’ meaning the cut will automatically extend to the farthest point of the solid body in front of the sketch profile. Now, if we need to change the width of the body down the line the cut will now automatically extend without needing to go in and change any values. Next step is cutting out top and bottom of the gate to define where it will connect with the main body of the carabiner, starting with the bottom pivot. I start the sketch on the right side of the body of the gate (aligned with the right plane). For the sketch to create the cut outs for the pivot, you can’t select or snap onto the curved section, since it’s not in the sketch plane. Here, we use the ‘Intersect’ tool to convert sections of bodies and pull them into your current sketch plane. This tool is also quite useful, and does almost the same thing as the Project tool except specifically for non-bodies. Select the intersect tool, then click on the curved portion of the gate and hit OK. You should now see a pink outline of the square profile extended onto the sketch plane. For this cut extrude, I first added a construction line down the center for mirroring. Then added a 2-point rectangle on the left side. I entered a height, then mirrored the rectangle and added a final dimension between the two rectangles. The cutout is finished by applying a cut extrude, through all. Next is the cut out for the top hook, I decided to go with a simple hook-and-pocket type design, with the pocket side being on the gate. The main reason the pocket is on the gate has to do with print orientation. Since the only real way the main body can be printed is on its side (like we did before), if the pocket was on the body, it would have support material inside. While the support material wouldn’t be too annoying to take out in this case, I decided to avoid the problem altogether since the gate can be oriented with the cut-out upwards without any major downsides. First, we need this to line up with the hook part in the body of the carabiner, so I’m going to get a rough sketch of what the hook will look like. There are a multitude of ways you can go about designing an interface like this, and I will be showing a good starting point for design. Sketching on the front plane, I started by just laying out a rough idea of what the middle should look like without adding any dimensions and just dragging the (blue) non defined lines until a point where they are roughly what seems right. Add in the dimensions that automatically show, then making it an extrude cut and boom, we have a rough hook. Now, with the gate in an initial state, before we go too far let’s start assembling them to see what they look like together. I usually like to do this early in the design process before putting any finishing touches or getting too fancy with my models. An important quote that has stuck with me throughout my education in engineering is “Fail fast, and fail early”. To that end, making a mock assembly early can help catch errors as early as possible, so they can be fixed as easily as possible. Opening the data panel, double click to open (or go back to) the main body of your carabiner, then simply click and drag the gate into the view window, your screen should look something like this. On the gate, you will see three arrows and 3 arcs, the arrows will move the part in X, Y and Z, and the arcs will rotate your part around the axes. Use these controls to roughly alight the gate to the carabiner, and hit OK. And look at that, not too terrible. Now is where you might realize some things you want to change, like for example the length and width is not quite what I want. Next is the cut out on the body of the carabiner, leaving the gate as a rough overlay I roughly cut away all the material except the area for the bottom pivot. No need to be too exact since we will be going back once the gate is locked in place. Next step is adding the pivot and clearance for the bottom pivot hole, I did this in a single sketch. Another quick note you might notice that when adding dimensions even if the overall sketch is at an angle the dimension automatically measures along the major axis. To change the dimension to being along the actual length of the line, after selecting said line put your cursor directly besides you line. It may take some wiggling back and forth but you should see the dimension switch to being aligned perpendicularly with the line. With both pivots in, the last part that needs to go in before we can create a joint is the pin. For parts like these, there are two main ways to go about designing them. First is creating the part section by section with individual sections. The middle of the pin, the head of the pin, and then a fillet to create the curved surface on the head of the pin. Then mirroring the body to create the other side of the pin. The other method is creating the pin with a Revolve Operation. For a Revolve extrude, instead of creating the pin with multiple separate sketches and extrusions, you create it all in one operation by sketching a 2D side profile of the pin, and revolving it around the centerline. Step 1 would be making the simplest sketch of the profile, here we only need to do ½ of the cross section. Mirror the sketch to create a closed chain. Then revolve the profile around the central axis. Now that we have out pin, we can start assembling the bottom pivot of the gate. As we’ve done before, drag and drop your part in and roughly position in close to where you want it in. For assembling parts, we will be using the Joint tool (Hotkey J). The joint tool allows you to define how two bodies connect and interact with each other. For each joint there are 7 joint types that define the motion in that joint. These are Rigid, Revolute, Slider, Cylindrical, Pin-Slot, Planar, and Ball. For the pin, I will first be using a rigid joint to join the pin to the body of the carabiner. The Position tab is where you select where the joint will be located on a specific part. The three modes are simple, between two faces, and two edge intersection. Simple: Creates a Joint Origin on a face, edge or point to align components. **Between Two Faces: **Creates a Joint Origin to center a component between two faces. Two Edge Intersection: Creates a Joint Origin to align components to the apparent intersection of two edges. In general, for creating joints you always want to apply the constraints to the part that is the least likely to change down the line. So, for the pin I chose the simple mode, and placed the part origin on the origin of the pin. For Component 2 (the frame), I chose the in-between two faces option since the center of the pin is centered between the two outer faces of the frame. Here, Plane 1 and 2 are the main side faces of the body, and ‘Snap’ is what defines where the origin on component 1 will be located between the two planes defined. I chose the Snap point to be the center of the line between the two holes of the pivot. The origin symbol (the circle with the three colored lines for each axis) should snap to the midpoint when you put your cursor over the center of the hole (see above). Now you will see the component move into place, and where you can add an offset or angle of your part if desired. You can also change this by dragging any of the arrows or the angle slider on the component. To join the bottom pivot of the gate to the pin, the process is similar except that we want the gate to be able to move. Therefore, we want the ‘Revolute’ joint, after adding the position (same as before) Fusion will animate the gate spinning around the pivot. Left clicking and holding lets you freely move around constrained parts, allowing you to see how it would move in real life. You can also double click on the Revolute Join symbol (the flag) to enter a specific angle. With the gate in place, it is now much easier to create the top hook by positioning the hook to the needed position and sketching around it. After creating the feature, now you need to check for interferences with the rest of the carabiner. Here it is simple to tell it will interfere without moving the gate. But stay with me, for more complicated geometry it’s not as easy to see interferences. Moving the part to where you think the interference is, and select the interference tool from the Inspect tab. Selecting the bodies involved, and including coincident faces to check they are actually coincident, we can compute the interference. The results box will list the interference(s) and their volume, along with what components are involved. The interference can also be seen colored on the model. Now, with the major parts finished it is time to add in fillets. A Fillet is the rounding of an exterior or interior corner of a part. With fillets there are also chamfers, they serve the same function as fillets but they are angled instead of rounded. Fillets serve to reduce stress concentrations that are almost always found at the corners of a part. Adding a fillet into a corner spreads the stress from where it would be concentrated right at the corner to being spread over the fillet. Lowering the overall stress on the corner. Before creating fillets of chamfers for 3D printed parts, it is important to keep the print orientation of your part in mind since the strength of the fillet can vary. When the fillet is horizontally aligned with the print bed, the fillet itself will be printed as a single curve, the print head is able to track the path of the fillet with one continuous line. But when the fillet is oriented to be vertically aligned to the bed, when sliced the fillet is jagged (slightly exaggerated here with a 1mm layer height), and compared to being aligned horizontally will not be as strong (or look as nice). In the fillet tool, after selecting the edges you want to fillet and drag the arrow until you the fillet is the right size. For 3D printing I usually don’t round to a fraction or a whole number like I would if the part was going to be machined or made into a drawing for fabrication. Instead of clicking OK and creating another fillet feature for the next set you want to add, clicking on the + will add another selection set allowing you to keep all your fillets organized. This is also why I save adding fillet features until the end, since you can keep all the fillets together in one feature. The Tangent Chain option is also helpful since it allows you to select entire chains instead of selecting all the edges individually. By now, your model should be in a good shape. There are also other features you can add like a specific appearance, or adding any branding like your name or a logo to your model, but I will not be going into that in detail. Introduction to FEA FEA Stands for Finite Element Analysis, which is an analytical method for solving complicated analysis in many fields of study from structural analysis (what we will be doing) to fluid flow, heat transfer, vibrations, etc. The basic idea of FEA is to break up a model into small, manageable sections that can be more easily solved by a computer. Which is great for us! Since trying to hand calculate forces on structural parts can be quite tedious. While the computer will handle all the math for us, creating a simulation that will generate useful information takes proper preparation and setup. While FEA software built into programs like Fusion 360 is great since it is easy to use, but a problem is the concept of “garbage in, garbage out”. The idea that if you put in flawed data into a logical processor (the FEA program, in our case) the output will also be flawed. The basis if FEA comes down to the elements themselves, and the nodes that connect them. Depending on the exact geometry, the software will calculate a new representation of your part made of elements and nodes. _Above_, we can observe how some of the simpler elements are constructed, and the different nodes they can be made of. This first FEA example will only be on the frame of the carabiner. I will be going over the full carabiner FEA afterwards since that follows almost the same process. But if this is your first time using FEA or CAD software like fusion, there is a change the specific geometry of your gate may give you errors in your simulation that may not be easily solvable. I chose to go back to the simplest version of my carabiner, where I had only drawn the outline and extruded it. Scrolling through with the controls on the left (or the slider), go back to the initial full extrusion of your carabiner. You can now use this for your initial simulation without creating a new part file. This is a good example of how the timeline is helpful, yours should look something like this now. In Fusion, go to the design tab in the upper right and select simulation near the bottom. When making a new study, Fusion has several different simulation suites available. Feel free to go through and read the description for each suite, but the main study’s we will be considering are static stress, Nonlinear Static stress, and event simulation. Even Simulation studies are meant to find out how your model responds to different factors like motion, impacts, and loads. Nonlinear Static Stress studies are meant to determine the static stresses and deformation throughout a model caused by the structural loads and boundary conditions while considering nonlinear material properties and large deformations. Static Stress **is the most basic FEA study. **Meant to analyze the deformation and stress on a model from structural loads and constraints while only calculating results assuming linear response from stress. One of the main advantages of Nonlinear studies is it give a more accurate representation of real-world scenarios. Since many materials are nonlinear (like elastic plastics), there are also nonlinear geometry’s like for large deformations, and nonlinear kinematic constraints. While both the Event Simulation, and Nonlinear Static Stress could be used in our application to find the resulting forces on the carabiner, we will be using Static Stress because of its simplicity, and ease of setup. Now that we know we will be using, we will need to model our “rope” for our simulation. Looking at our model, you might thing we can apply a force going up on the top curve, and constrain the bottom of the carabiner to be stationary. But simply applying constraints to the whole inner surface of the carabiner will not accurately represent what is happening when force is applied from a rope. To add this to our model, we will need to model two “ropes” and add them to our assembly to apply the right conditions to our carabiner. My model rope was roughly 10cm in diameter and 1” long, with two square tabs on the end. The width and addition of the square tabs was arbitrary, but the diameter was what seemed to be a common size for rope. When applying the material for the rope, while we can create a custom material that is rigid as I cover in the next section, I will be making mine the in-built “steel” in Fusion’s material library since it will be rigid for our use. You can also see that I modeled this part so the origin is right in the middle of the part, taking the effort to place the origin in a sensible spot will now come in handy. Dragging in the model and boom, it’s already basically in the correct place, no fiddling needed. After dragging in two “ropes” (or the puller as I named it) roughly align them with the Move/Copy tool until they are roughly in the correct place. Now we need to apply joints to keep them in place and not be accidentally moved. I applied a rigid joint to both the top and bottom pullers, and moved them until they were as tangent as possible to the inside of the top curve. Now we need to make the physical material of the carabiner PLA, but we run into a problem. Fusion 360 lacks PLA in their default materials library, and the additive material library. But going beyond that, we want our study to specifically apply to 3d printed parts. And as we went over earlier in the Introduction to 3d Printing unit, each print will vary depending on print settings and orientation. While in the future there will probably be some way to slice a part and do FEA on the virtual print file, for now we will account for this discrepancy by looking at available research. MIT has a comprehensive paper on PLA (_https://dspace.mit.edu/handle/1721.1/112940_). All the required mechanical values can be found in table 1. Don’t forget to check your units when adding them in (1 MPa = 1 N/mm^2 = 1 kg/m*s^2). In the “SOLID” tab, click on “MODIFY” and open “Manage Materials” near the bottom of the drop down. In the Material Browser, click on the circle icon with a + mark on the lower left corner of the window, then click “Create New Material”. In the window go into the ‘Fusion 360 Material Library’, click on plastic and find ‘ABS Plastic’, then add the material to the editor. Close the window, and you will now see the ‘Identity” “Appearance’ and “Physical’ tabs on the left of the window. Fill in the required values in the physical tab, and fill out the Appearance and Identity tabs. Don’t forget to list the source URL so you will know where these values came from if you go back in the future. You can also edit the materials appearance and other properties here. The material should now show up in your favorite tab, so we can apply it and move on with our simulation. With the materials applied, we need to move onto adding constraints to our study. Fusion gives us several tabs for adding information into our simulation before we can run it. Opening Load Case1, consisting of loads and Constraints. First, we need to constrain our model, in the Display tab, click on the DOF View button in the middle. This is the DOF or Degree Of Freedom view for our study. You will see that all of our bodies in the study are currently free. For our study, the lower puller will not be moving. Click on ‘Constraints’ in the tool bar and add a structural constraint (Also in the modeling tree, or hotkey C). There are 5 constraints to choose from, but for this study we only need Fixed, and Frictionless constraints. Select the bottom faces of the carabiner puller, it will now be fully fixed in place. Next, we need to constrain the upper puller. Since this part will be sliding upwards, simulating a rope pulling the top of the carabiner, we need to use the ‘Frictionless’ constraint. Select only the outer x and y faces of the puller and click ok. These constraints mean that the puller can now only move up and down, in a virtual “Channel” crated by the outer faces of the puller. There should also be a frictionless constraint applied to the two main faces of the carabiner to prevent side to side movement. With our structural constraints in place, and before we apply our loads, we need to create a contact set. A contact set is basically a way to identify a relation between two parts and how they interact with each other. Right click on ‘Contacts’ and select ‘Manual Contacts’. (There is also an automatic contacts tool, but since we only have two doing it manually is fine). Select the primary body as the carabiner, and the secondary body as the top puller. Selection set 1 is the area they interact, the inside face of the carabiner here. Selection set 2 is just the round face of the puller. With everything selected, you will see the rest of the menu open for defining the contact type. There are 5 types of contacts. Bonded - Describes geometry as being welded or glued or otherwise permanently fixed. No penetration, no separation, bodies cannot slide. Separation - Describes geometry that is separated, but does not slide, such as the gap between a fastener and a hole. No penetration, separation is possible, bodies cannot slide. Sliding - Describe geometry that can slide, but does not separate, such as scissors, pliers, a vise jaw, or mechanical arm. No penetration, bodies can slide. **Rough **- No penetration, separation is possible, bodies cannot slide. Offset Bonded – Same as bonded except the bodies are offset. For the contact between the carabiner and the puller, there is no penetration, and the geometry should be bonded along that face for the entirety of the simulation. So, the Bonded joint is what should be applied and we can leave the penetration type as symmetric. The other settings can be left alone. Click ok to create the contact, then repeat the same process for the lower puller. Clicking edit on the contacts section in the tree, we can see the two contacts and where they are applied. The contacts can also be edited here. Adding structural loads is the next step, structural loads fall into seven main categories. Since we will be ‘pulling’ the puller upwards, we will use a force. Go to loads, create a new structural load (Hotkey L) and select force as the type. The target is the two faces on top of the puller, with the force’s direction being upwards. At this stage, the load is fairly arbitrary as we will be changing it and running multiple simulations. Other simulation types are capable of applying force until failure for a certain load, but for a static stress simulation we need to enter a value. Try and make your best estimate about how much it should hold and you can see how close you are. Going back to the Degree of Freedom Tool, make sure everything is green and fully fixed. Your simulation is fully set up! Now it’s time for the fun part, meshing and running the study. Right click on mesh and select Mesh Settings, I usually have the slider around the middle for the first run. After clicking ok, right click on Mesh again and select generate mesh, your part should now look something like this. We can now click the Pre-check icon, on the left side of the solve section. Everything should be good, but if not address the warnings shown. Choose the run locally option in the run simulation tab. Running your simulation on the cloud will take longer than running it on a semi modern laptop (I am running a Lenovo Laptop from 2018, 8000 series i7) and also takes cloud credits. Now, Finally, we can run our study. This shouldn’t take too long depending on your hardware. Once your simulation has finished, it will probably look something like this. The default graph to show is the safety factor, and clearly the force I chose was well under the failure point. Safety factor is a measure of how much stronger a design is compared to its working load. Calculated by Stress to Fail / Stress Applied. For example, structural steel in buildings typically has a safety factor of 4-6. With our results, we need to conduct a reality check on our findings. Fusion creates six plots for a Static Stress simulation. Safety Factor, Stress, Displacement, Reaction Force, Strain, and contact pressure. For our study, we are mainly concerned with Stress, Safety Factor, and Displacement. Under Load Case1 by the colored graph, click on the box below and select stress in the drop down. You should now see a max and a min stress in MPa, if not click on the inspect tab on the top toolbar and select “Show Min/Max”. We also need to toggle the mesh visibility so we can see it, click on the icon above ‘Display’ on the tool bar. You should now see the stress plotted on your carabiner along with the mesh. At this stage, I took a close look at the stress on the pullers to make sure nothing is out of the ordinary. Since the stress on them was basically 0, and the stress pattern looked correct, I hid the upper and lower pullers along with the symbols showing the constraints by clicking the eye icon in the model tree. They are no longer required for the study, and block us from seeing the whole carabiner. During this stage in our study, the main goal is to evaluate your study and make sure there are no obvious discrepancies from your simulation. And making sure your results are aligned with that would happen in the real world. Everything depends on your specific carabiner’s geometry, but I will lay down some basic guidelines. Look at your maximum and minimum stress. Do the values make sense? Are the numbers in the correct order of magnitude? Significantly lower/higher than you expected? You also need to look at the location of the maximum and minimum stress, along with any other locations with stress concentrations. Fusion 360 gives us an amazing tool for visualizing this. If you click on the colored slider to the right, you should see two arrows at the top and bottom. These arrows allow you to only see parts of your model with the corresponding range of stress, helping narrow down stress concentrations. In my model we can see that the max stress is 6.1 MPa, or 885 psi, with an applied load of 40N (9 lbf), Seems reasonable for my load. We can also locate the main stress concentrations, at the top and bottom where the puller is connected, and at the sides of the upper loop. This is a good time to use the lower slider starting at the max stress level and going down, giving you a good idea of how the stress propagates through your carabiner. Since my first load was clearly too low, I moved up to 120N and ran the simulation again. It might take some trial and error, but you want to hone in on a safety factor of 1. Meaning the force applied is just about what would make it break. Let’s change the results viewer to view the displacement, the default view is Adjusted displacement. Adjusted just means that the program has made the displacement more dramatic to better show how your model is deforming. Adjusted displacement multiplies the actual displacement by The actual displacement should be somewhat low. Finally, change the viewer to show the safety factor. This view basically just takes the stress plot and divides the stress at each point by the failure point. So, if the material fails at 30 MPa, at a point with 30 MPa of stress the safety factor would be 1. Go through the same steps outlined before about checking the simulation for errors and allows for better force averaging. In your previous studies, you might have noticed that your maximum stress was just along one mesh connection. With a finer mesh, the increase in cells allows for structural loads to average over multiple mesh nodes, leading to more accurate results. Here, we can see a clear case of where force averaging has not been achieved, leading to imprecise results. The part itself is the same along the X axis, the force is being applied evenly across the entire top face of the part, and the entire bottom face is fixed. Looking at a cross section along the X plane, the cross section is the same, meaning that the resulting stress should be in an even line across the entire part. Instead, the maximum stress is being located only in the middle of the boundary of the mesh cells. Increasing the mesh, the stress how forms a distinctive line as we would expect (Although I have gone a bit overboard jumping from 1000 nodes to over 400,000). Other than manually lowering the size of your overall mesh, you can also apply local meth controls. Applying mesh control is where you manually set specific areas of the most importance to have a higher mesh, while leaving the mesh in non-critical areas larger. After selecting the local mesh control tool, I selected the curved faces on the top and bottom of the carabiner. After applying mesh control Now, you should have all the data you need to analyze your design and make changes if needed. In areas with stress concentrations, try adding more material or changing the geometry of your part (adding/enlarging fillets, shortening connections to make the model stiffer, changing the geometry of high stress areas to better resist the load). For areas with very low stress, you might be able to safety remove material by creating pockets to add weight in other sections. For iterating your design, Fusion makes it easy to switch from the simulation window back to the simulation window. Depending on how drastic your changes are, you should be able to directly update your simulation, create a mesh of the new design and run it without making any changes to the simulation settings themselves. You can also easily scroll through your iterations on the timeline to compare the first iteration to a updated version. FEA on the Gate Going back to the design tab, you can now move to your finalized model of your carabiner with your gate. The simulation setup will be the same as before, except we now need to define all of the contacts for the gate itself. For my gate, that entailed adding bonded contacts where the gate connects with the frame of the carabiner. Along with the contact between the frame, the gate, and the pin. Since the pin and gate were added, the frictionless constraint should be applied to the sides of them like before to prevent side to side movement. The pin also needs to be defined as a pin joint in the Constraints section. Also, if your model includes a spring or separate part for closing the gate you should consider removing it from the simulation if it does not play a role in the structural stability of the carabiner. Before running, check your setup using the DOF as well as the groups tool. In the group view, parts that are not in a group (I.E. not constrained correctly) appear grey and will need to be constrained or the simulation will fail. Since the full carabiner has more parts and is more complicated, the simulation will take more time to fully solve than before. After running my simulation, the failure point is in a similar area as before, with the maximum stresses being near the upper loop. There is also a buildup of stress in the hook itself, but it seemed to hold up slightly better than the rest of the carabiner. We can also observe how the stress concentrates along the fillets at the bottom of the gate as the carabiner is pulled upwards and deforms. I hope that my tutorial has been helpful to you. Best of luck.</summary></entry><entry><title type="html">Make a Video Game</title><link href="http://localhost:4000/project/2020/09/22/Video-Game.html" rel="alternate" type="text/html" title="Make a Video Game" /><published>2020-09-22T10:03:30-04:00</published><updated>2020-09-22T10:03:30-04:00</updated><id>http://localhost:4000/project/2020/09/22/Video-Game</id><content type="html" xml:base="http://localhost:4000/project/2020/09/22/Video-Game.html">&lt;p&gt;Making a Game in Unity&lt;/p&gt;

&lt;h1 id=&quot;project-information&quot;&gt;Project Information&lt;/h1&gt;

&lt;p&gt;Description: Students will follow along with the tutorial to setup the
Unity game engine and create a game demonstrating different concepts and
methods useful for game programming.&lt;/p&gt;

&lt;p&gt;Learning outcomes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Students will create a simple game to demonstrate understanding of
the Unity Engine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Students will write basic programs to show knowledge how to do basic
scripting in C#.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Students will be able to design a simple game through Unity.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Students will understand the basic theory of game design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estimated Time: 5 Hours&lt;/p&gt;

&lt;p&gt;What students will need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A computer that can install and run the Unity game engine (Most Can)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;procedure-for-user-study&quot;&gt;Procedure for User Study&lt;/h1&gt;

&lt;p&gt;If you are participating in the user study, then these are the instructions for going through this tutorial. If at any point you do not want to continue the project, you are free to stop working on it. Then you go and complete the post-survey and are done with&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Read through the tutorial.&lt;/li&gt;
  &lt;li&gt;Follow along with the instructions.
a.	For this project,  creating a simple game in Unity similar to what is shown in the tutorial is considered completing the project.&lt;/li&gt;
  &lt;li&gt;Feel free to make note of any parts of the tutorial that were unclear, or you wish provided more or less detail.&lt;/li&gt;
  &lt;li&gt;Once you have either completed the project, or you wish to be done, you can complete the post-survey to finish the user study.&lt;/li&gt;
  &lt;li&gt;After the completion of the study, you are free to continue working on your project in whatever capacity you want. That work is not part of the study.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;h2 id=&quot;goal-of-the-project&quot;&gt;Goal of the Project&lt;/h2&gt;

&lt;p&gt;This tutorial will introduce game development through Unity and C#
Scripting, provide the knowledge to make your own game. Unity is a
powerful game engine capable of developing all manner of video games.
Whether you are making something small for a game jam, or part of a team
making fully fledged multiplayer games, Unity has the features and
capabilities you need. The programming language Unity uses, C#, is a
powerful and modern object orientated language with capabilities
extending beyond Unity.&lt;/p&gt;

&lt;p&gt;This tutorial will first explain the layout and concepts of the Unity
Editor and C# scripting then split into sections for each important
step of developing a very simple game. In each section there will be a
video showing how to go use the Unity Editor to accomplish the task,
which already has completed C# scripts. After, there will be an
explanation of each script, building up the logic and showing what that
script looks like.&lt;/p&gt;

&lt;h2 id=&quot;prior-knowledge&quot;&gt;Prior Knowledge&lt;/h2&gt;

&lt;p&gt;No knowledge of Unity / Visual Studio is needed, and neither is any
knowledge about C# scripting. Although not necessary, experience or
understanding of coding or game design theory is useful for
understanding these topics.&lt;/p&gt;

&lt;h2 id=&quot;game-demo-and-pre-made-sprites&quot;&gt;Game Demo and Pre Made Sprites&lt;/h2&gt;

&lt;p&gt;Folders containing the Sprites used in the game and an example download
of a game (where the application is the middle file) can be found in the
google drive folder linked below, along with a document walking through
the download of Unity and a zip folder of the two folders mentioned above
if needed.&lt;br /&gt;
&lt;a href=&quot;https://drive.google.com/drive/folders/1s25mtHGSSrDsAIstl6RRpmQweew1jg1s?usp=sharing&quot;&gt;Link to Google Drive Folder&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;installing-unity-and-visual-studio&quot;&gt;Installing Unity and Visual Studio&lt;/h1&gt;

&lt;p&gt;If you do not have Unity or Visual Studio installed, you are going to
want to install the latest versions of Unity Hub and Visual Studio.
Unity Hub acts as a medium for installing the Unity Editor along with
accessing content provided by other users. Visual Studio is an excellent
programming software that Unity integrates with to edit code and create
scripts for your game.&lt;/p&gt;

&lt;h1 id=&quot;understanding-the-unity-editor&quot;&gt;Understanding the Unity Editor&lt;/h1&gt;

&lt;p&gt;Before starting your project, it is important to have a basic
understanding of Unity and how to use the editor. However, the bulk of
your understanding will come from creating your game and testing things
out to figure out how it works.&lt;/p&gt;

&lt;h2 id=&quot;the-unity-editor&quot;&gt;The Unity Editor&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;This is a screenshot of what the Editor generally looks like&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As you can see, there are four main parts of the screen&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-hierarchy-upper-left&quot;&gt;The Hierarchy (Upper Left)&lt;/h3&gt;

&lt;p&gt;This part shows all the objects present in the game scene at that
moment. This could include the camera, the player, random objects like
rocks, enemies, etc. It also displays the relationship between the
objects. For example, the children of an object might be tied to the
object so that they follow as the object moves.&lt;/p&gt;

&lt;h3 id=&quot;the-file-system--console-bottom&quot;&gt;The File System / Console (Bottom)&lt;/h3&gt;

&lt;p&gt;This part displays the files in your game such as images, programs, or
useful tools the editor needs but you do not really need to worry about.
The file system is useful for organizing the files used by your game.
The console acts is where you can find errors displayed, as well as any
other messages created by the code as it runs. This comes in use when
you are debugging your code.&lt;/p&gt;

&lt;h3 id=&quot;the-game--scene-middle&quot;&gt;The Game / Scene (Middle)&lt;/h3&gt;

&lt;p&gt;This displays what your current scene looks like. It allows you to move
objects around, scale them or edit components of them. It also displays
your game when you run it so you can play it as you build it.&lt;/p&gt;

&lt;h3 id=&quot;the-inspector-right&quot;&gt;The Inspector (Right)&lt;/h3&gt;

&lt;p&gt;This part allows you to add components and scripts to a game object, set
variables, position objects by coordinate position, and much more. It
allows you to modify variables in your scripts before and during running
your game.&lt;/p&gt;

&lt;h2 id=&quot;important-concepts&quot;&gt;Important Concepts&lt;/h2&gt;

&lt;h3 id=&quot;game-objects&quot;&gt;Game Objects&lt;/h3&gt;

&lt;p&gt;Game objects are a core concept in Unity. Essentially, everything that
is in a game is an object or a clone of an object. All code that is run
must be attached to a game object. Examples of game objects might be the
camera, a light source, a background image, an enemy, or any other
entity that is part of your game. All game objects have a Transform
component which means they have a position that can be set in the X Y
and Z axis, a scale on each axis, and a rotation around each axis. Game
objects do not even have to be visible; some are there purely to run
code. Values used in your script, such as player health, or ammo count,
can be changed in the editor or through scripts.&lt;/p&gt;

&lt;p&gt;Game Objects that are children of another one (placed inside them in
hierarchy) will have a transform value relative to the parents instead
of space around them (so 0, 0, 0 will end up at parents position)&lt;/p&gt;

&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;

&lt;p&gt;These are additions to game objects you can add that handle various
things not every game object might need. For example, the Sprite
Renderer component allows a game object to show an image in its place.
The BoxCollider component allows a game object to physically interact
and collide with other game objects with a BoxCollider component or
detect when overlapping with another game object. Components are a
powerful system that allow you to add new behavior to game objects
without requiring every object to have that functionality, and without
the need to copy code between objects.&lt;/p&gt;

&lt;h3 id=&quot;scenes&quot;&gt;Scenes&lt;/h3&gt;

&lt;p&gt;These are the way to have different levels in a game. They are built
separately from each other and cannot interact with each because only
one scene is able to run at a time, usually. Using scripts, you can
switch between scenes, which will stop and reset the current scene, and
then load the new scene.&lt;/p&gt;

&lt;h3 id=&quot;variables&quot;&gt;Variables&lt;/h3&gt;

&lt;p&gt;Variables are the most basic and common way of storing data. A variable
can be any kind of data. Variables have “types” which describe what kind
of data they store. Variables can store things like a number, word
(called a 'string'), component, or game object.&lt;/p&gt;

&lt;p&gt;There are multiple ways to represent numbers with a variable too.
Depending on the accuracy and memory you want it to have. The most
common ones are integers (numbers without any decimals) or floats
(numbers that can have decimals and are indicated with an ‘f’ at the
end)&lt;/p&gt;

&lt;p&gt;A variable will usually look like this when set outside a method:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Public Type Name&lt;/strong&gt; (Can be accessed anywhere in the game)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Private Type Name&lt;/strong&gt; (Can only be accessed in the script)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static Public Type Name&lt;/strong&gt; (Accessed everywhere and all instances are
the same)&lt;/p&gt;

&lt;p&gt;And like this when inside a method:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Type Name&lt;/strong&gt; (essentially private since it is only used inside the
function)&lt;/p&gt;

&lt;p&gt;Type could be something like integer or string, etc.&lt;/p&gt;

&lt;p&gt;Access modifiers are the first part of these lines, the public, private,
static ones which tells the system who can use that variable and how it
can be stored. A public variable can be used anywhere in your system.
Inside its class it can be used however, and outside its call it must be
called as a child of that class.&lt;/p&gt;

&lt;p&gt;For example, in the class Animal you have a public variable Hair. In the
class Animal you have some functions that use this variable and can call
it as Hair. But another class Animal2 wants to call the variable Hair,
so it must get a reference to the Animal object and then it can call the
Hair variable like Animal.Hair. This is how you call a variable or
function from a class, by placing a perioid after the class then the
variable you want.&lt;/p&gt;

&lt;p&gt;A private variable can only be used in the class it is defined.&lt;/p&gt;

&lt;p&gt;And a static modifier is applied to a public or private variable so that
each instance of that variable represents the same varaible, which does
have its uses. For example, let's say we have an Enemy AI and each one
needs to find and store a variable for the player's position. Each one
could calculate it, or you could use a static variable to represent the
position so only one enemy needs to find it and the rest will have the
variable updated automatically.&lt;/p&gt;

&lt;p&gt;With unity, any public variable can be set in the editor to initialize
it when the game starts. Static or private ones cannot be set. Although
there is a way to force Unity to let you set them by adding [Serialized
Field] above each definition, although that is a very rare
optimization.&lt;/p&gt;

&lt;h3 id=&quot;methods&quot;&gt;Methods&lt;/h3&gt;

&lt;p&gt;A method is a funciton that can take some variables as input, if any,
and return something, if anything, after running some lines of code
inside of it. There are some premade ones like Start (which runs its
contents once at the start of a game) or Update (which runs its contents
each frame of a game) or functions you define on your own which are
handled based on how they are called in your script. They can also
return a value such as a number or a component or even nothing (void).
This is the Start method which takes no input and returns nothing,
simply runs whatever code is inside of it once.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Code Here  &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is an example of another method which returns true is its input is
greater than 10, otherwise it returns false. These are boolean (bool)
values (true or false):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Method1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;scripts&quot;&gt;Scripts&lt;/h3&gt;

&lt;p&gt;This is a crucial part of unity. A script is code that you write that
can become a component for game
objects&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we have a script ‘FrameRate’ which represents a new Class under the
same name. Any object with this script will have an instance of this
class as a part of it.&lt;/p&gt;

&lt;p&gt;It has a reference to the UnityEngine up top which means it will be
using functions or variables or classes in the Library called
UnityEngine.&lt;/p&gt;

&lt;p&gt;And it has a call to MonoBehavior next to the class, which means the
FrameRate class will inherit some actions from the MonoBehavior class.
This is simply a way for Unity to make sure the classes are dealt with
correctly when instantiating objects or destroying objects to make sure
there are no errors. It is not needed for scripts that will not be
attached to objects, basically ones that are just used to store
variables across scenes, which you wont need to worry about.&lt;/p&gt;

&lt;p&gt;In this class we have a public variable Rate which can be set in the
editor or in any of the scripts as long as a reference to the instance
of the script is made.&lt;/p&gt;

&lt;p&gt;It has the Start method which means it will run whatever code is inside
it once for the frist frame it is active, where it will use the Rate
variable to set the frame rate of the game.&lt;/p&gt;

&lt;p&gt;Then in the Update method, which runs for each frame of the game, it
checks if the frame rate has changed and then sets it back to the Rate&lt;/p&gt;

&lt;p&gt;Both methods and the public variable are in the same scope, which is a
common term in programing that means they were defined in the same
place, in this case insode the class definition but not inside anything
else. This means that anything in the same scope or inside any functions
in that scope can call them without needed a reference to the class.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-for-your-game&quot;&gt;Setting up for Your Game&lt;/h1&gt;

&lt;h2 id=&quot;create-a-new-project&quot;&gt;Create a New Project&lt;/h2&gt;

&lt;p&gt;Now that we have covered the basic background information, we are ready
to start making something in Unity. We will be making a simple 2D game
so you can start by clicking new and making a new 2D project, give it a
name and choose where to save it. Exactly where you save it to is not
important.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;folders&quot;&gt;Folders&lt;/h2&gt;

&lt;p&gt;The first thing you should do if you want to stay organized is to set up
several folders to divide your assets into. Four standard folders for a
simple game like this one would be &lt;em&gt;Scenes&lt;/em&gt; (which should already
exist), &lt;em&gt;Sprites&lt;/em&gt;, &lt;em&gt;Scripts&lt;/em&gt;, &lt;em&gt;Prefabs&lt;/em&gt;. Audio is not necessary in this
case. Right click on open space in Assets or click the + to the left
while in Assets to add the folders.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;making-your-game&quot;&gt;Making Your Game&lt;/h1&gt;

&lt;h2 id=&quot;the-player&quot;&gt;The Player&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/Hute9B0Nzyc&quot;&gt;Player&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://youtube.com/embed/Hute9B0Nzyc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first essential part of making a game is setting up the player
controls and making sure it feels right to play, we will start by making
the game object for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image6.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image7.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To add a Game Object into your scene, there are a couple methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Click on the + to open a drop down menu, or Right Click in the open
space below the Main Camera.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In this menu you can select either Empty Game Object, or select 2D
Object then select Sprite.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can also open up the GameObject menu at the top of the screen
for the drop down menu.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clicking on the new Game Object after already clicking it
(Highlighted Blue) will allow you to name it whatever you want to
distinguish it &amp;gt;within the hierarchy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Selecting 2D &amp;gt; Sprite will essentially make an Empty Game Object
but with a Sprite Renderer already attached to it.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Always Remember to Reset the Transform component of a new Game
Object (sometimes start off as random values)&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;player-components&quot;&gt;Player Components&lt;/h3&gt;

&lt;p&gt;Now we just need two components to make the player movement:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sprite Renderer&lt;/strong&gt; - This simply displays an image for the object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rigidbody2D&lt;/strong&gt; - This allows you to apply physics to an object such
as velocity in 2 Dimensions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To add components to an object you can click on the player object in the
hierarchy or in the scene view, then look over to the right in the
Inspector.&lt;/p&gt;

&lt;p&gt;Then you can press the button 'Add Component' and search for &lt;em&gt;Sprite
Renderer&lt;/em&gt; and &lt;em&gt;Rigidbody2D&lt;/em&gt; and add each of them to the Player object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rigidbody2d&quot;&gt;Rigidbody2D&lt;/h3&gt;

&lt;p&gt;In the Rigidbody2D component we will need to make some changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Set the body type to Kinematic.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Dynamic means it will experience Mass and Forces applied to it
by scripts and other objects.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Kinematic means it will only have a velocity value that is set
through scripts.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set collision detection to Continuous.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Discrete means it checks for collisions less often which means
they may be missed at higher speeds.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Continuous check for collisions more often which avoids the
clipping effects.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image11.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;spriterenderer&quot;&gt;SpriteRenderer&lt;/h3&gt;

&lt;p&gt;In the Sprite Renderer component, we need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open the folder section to where the player sprite is located.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then find the player object again and go to its inspector and open
Sprite Renderer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then drag the player sprite into the empty slot in Sprite Renderer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, the Sprite is not the size it should be and that is because
the pixel size Unity thinks it is has not been set.&lt;/p&gt;

&lt;p&gt;We can select all the images in the sprite folder and in the inspector,
it should show some information about the sprites:&lt;/p&gt;

&lt;p&gt;We should:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Set the pixels per unit to 16, this can help unity with handling the
sprites but is more useful with keeping pixel art images consistent
in pixel sizes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set Filter Mode to Point (no filter) and Compression to none&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select Apply&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;player-movement-script&quot;&gt;Player Movement Script&lt;/h3&gt;

&lt;p&gt;Now we will need to create our own component for the player object to
control its movements. You can do this in multiple ways, such as
clicking to add new component to the player object in the inspector and
simply selecting new script, naming it Player Movement or something. You
may also right click in a designated folder in the file system below and
use the menu to add a new C# Script then name it accordingly.&lt;/p&gt;

&lt;p&gt;In this script we will need to set a few variables to use in the Update
method which is what will happen each frame. We will need:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public Rigidbody2D Rigidbody&lt;/strong&gt; &amp;lt;- A reference to the players
rigidbody component we can set through the editor&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public Vector2 Speed&lt;/strong&gt; &amp;lt;- A reference to a pair of values x, y we can
use to set the speed the player has on each axis&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public Vector2 Bounds&lt;/strong&gt; &amp;lt;- A reference to a pair of values that we
will use to limit player movement to the screen bounds&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;private Vector2 Velocity&lt;/strong&gt; &amp;lt;- A pair of values we can use to set the
velocity of the rigidbody to, since we can't set x or y individually&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;*'public' indicates that it can be viewed and set outside the
script while 'private' only allows that within the script*&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;*The word after these is the type of variable being set, such as a
number or component or something*&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;*Then the third word represents how that variable can be called in
the script*&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be done outside the methods but within the class definition for
Player Movement.&lt;/p&gt;

&lt;p&gt;Next, we need to think about how we will handle the logic for the
script.&lt;/p&gt;

&lt;p&gt;We need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Move the Player on either axis based on Inputs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stop motion in a certain direction if it will go beyond bounds .&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A useful class we can use is the Input class which houses several
functions that get inputs from your computer. In this case we can use:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input.GetAxisRaw(“Horizontal”)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input.GetAxisRaw(“Vertical”)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the getAxisRaw function from the Input class which takes a
direction and returns a float number as either -1, 0 or 1 based on WASD
key inputs.&lt;/p&gt;

&lt;p&gt;For example, W will return 1 for getAxisRaw(&quot;Vertical&quot;)&lt;/p&gt;

&lt;p&gt;Now we need to check if moving in these directions will move us out of
bounds, we can use an if statement, which takes a boolean or comparison
as an input and runs whatver code is inside it if it is true, like so:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAxisRaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Horizontal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do Something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do Something Else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, this will need to work for either direction so taking the
absolute value (from the Mathf class) of where the player will be should
work like you will see below.&lt;/p&gt;

&lt;p&gt;We can put this all together to form the Player Movement Script:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a player movement script. It starts each frame with a blank
vector and depending on whether the inputs will go out of bounds, sets
values to that vector which then is multiplied by a vector representing
the speed of the player on each axis and applied to the rigidbody's
velocity.&lt;/p&gt;

&lt;h2 id=&quot;the-laser&quot;&gt;The Laser&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/BRWhie3PUXY&quot;&gt;Laser&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://youtube.com/embed/BRWhie3PUXY&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image14.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What is a spaceship without lasers? First we need to create a new game
object in the hierarchy and call it Laser.&lt;/p&gt;

&lt;p&gt;Laser Components&lt;/p&gt;

&lt;p&gt;Now we need to figure out what components we will need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SpriteRenderer&lt;/strong&gt; to show its sprite.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rigidbody2D&lt;/strong&gt; to move it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add these components and remember to drag the laser sprite into the
sprite slot and set the rigidbody to kinematic and reset the transform.&lt;/p&gt;

&lt;h3 id=&quot;laser-movement-script&quot;&gt;Laser Movement Script&lt;/h3&gt;

&lt;p&gt;We should not need that complicated of a script for the Laser. It simply
needs to set its velocity on spawn and wait until it is out of bounds
then despawn.&lt;/p&gt;

&lt;p&gt;To do so we need a reference to a Rigidbody2D, a variable to set the
speed and one for the bound as well. Then in the Start method, which is
called the first frame an object is active, we can set the velocity to
the speed. Finally, we can use the Update method to check, each frame,
that the Laser is out of bounds, and if so, destroy it, like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Vector2 class also houses a few variables that are instances of
Vector2's with different values representing directions. For example,
the up Vector2 is (0, 1), or up the y axis.&lt;/p&gt;

&lt;p&gt;This makes it just a little simpler when setting vectors in directions
along an axis, since we want to set the velocity to going up at some
speed and now we can just have the speed as a vaiable instead of making
a new Vector2 variable.&lt;/p&gt;

&lt;h3 id=&quot;player-shooting-script&quot;&gt;Player Shooting Script&lt;/h3&gt;

&lt;p&gt;Now we need to have the Player shoot some lasers! First, we need to turn
the Laser object in the scene into a prefab. To do so we just drag the
Laser game object from the hierarchy into the file system. Then delete
the old object from the scene. Now the Laser will be a prefab!&lt;/p&gt;

&lt;p&gt;Next, we can make a new script to add to the Player to shoot lasers,
something like PlayerShoot or Shootlaser or something.&lt;/p&gt;

&lt;p&gt;There will be some new concepts here. But first we will want to set some
variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;public GameObject Laser&lt;/strong&gt; &lt;em&gt;This is how you reference a prefab from
a script&lt;/em&gt;*&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;public int CoolDown&lt;/strong&gt; &lt;em&gt;This is a number we will use to wait some
frames to be able to shoot again.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;private int Timer&lt;/strong&gt; &lt;em&gt;This will be used to tell if we can shoot
again.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now, we can use the Update method to check each frame, if the Timer
is not zero decrease it. And if the space is pressed and the timer is
zero, then we can spawn some lasers in front of the player.&lt;/p&gt;

&lt;p&gt;To handle the timer we can use a more compact if else statement which is
used when you want it to return a value, in this case we can use it to
return what number the timer should be subtracted by. It goes like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is a more optimized line of code than an if statement for specific
cases and is structured where before the ? Is the comparison you want
then immediately after is what you would return if it is true and after
the : is what you would return if it isnt true. And whatever is returned
takes place of what is after the =&lt;/p&gt;

&lt;p&gt;To get a key press as an input we can use the GetKey function from the
Input class:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input.GetKey(KeyCode.Space)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a few variants to the GetKey functions, there is also
GetKeyDown and GetKeyUp. Each has its own use:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GetKey()&lt;/strong&gt; simply returns True when the specified key is pressed on
that frame, doesn't matter how long it was pressed before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GetKeyDown()&lt;/strong&gt; returns True only for the same frame that key was
pressed down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GetKetUp()&lt;/strong&gt; returns True only on the frame the specified key was
released.&lt;/p&gt;

&lt;p&gt;Using GetKey can allow us to have an automatic fire for our laser which
is what we will want.&lt;/p&gt;

&lt;p&gt;Then to spawn in a prefab using a GameObject variable, we can use the
Instantiate function:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instantiate(Prefab, Vector3, Rotation);&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This will spawn the Prefab in the game with coordinates of the Vector3
parameter and rotation of the Rotation parameter.&lt;/p&gt;

&lt;p&gt;In the editor make sure the script is added to the player and the laser
script is added to the Laser prefab and the variables are filled with
numbers that make sense. For example the cooldown could be 20 frames,
and the spawn point could be 3, 3 for the laser. And the Laser could
have a speed and bound of 50 or something.&lt;/p&gt;

&lt;h3 id=&quot;frame-rate&quot;&gt;Frame Rate&lt;/h3&gt;

&lt;p&gt;Running the game right now should allow you to move the player about and
fire lasers, however you will notice you will be firing very fast. This
is due to a frame rate not being set. To do so we can set the Target
Frame Rate in a new script called Frame Rate like below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you just need to attach that script to a game object like the Camera
(which is always present) and it should be running a lot smoother. Set
the rate to something like 60 like most games are. and you can also mess
around with the cooldown frames until it feels right.&lt;/p&gt;

&lt;h2 id=&quot;the-asteroid&quot;&gt;The Asteroid&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/u5gUrv3mPaI&quot;&gt;Asteroid&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://youtube.com/embed/u5gUrv3mPaI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image17.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need something to shoot at. An Asteroid moving down the screen
will do. We can create a new game object in the hierarchy named
Asteroid. It will need to move across the screen and interact with the
lasers and player. To do so we will need:&lt;/p&gt;

&lt;p&gt;Asteroid Components&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SpriteRenderer&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rigidbody2D&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;BoxCollider2D&lt;/strong&gt; &amp;lt;- This is a new concept, it is a component that
can be used to collide with other objects, applying force to them,
or just tell if an object overlaps with another.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember to reset the transform and set an asteroid sprite to the
renderer slot and set the rigidbody to kinematic and continuous, and now
you also should make sure the bounds for the collider fit the asteroid.
Click the triangle shape for the BoxCillder2D component and in the scene
view you should see the square it makes up around the object, if not
make sure the sizes aren’t 0 for the size of the collider. You can edit
these values and drag parts of the square until it feels like a correct
hitbox for it. Having the sprite active to get a visual for the size is
a good practice.&lt;/p&gt;

&lt;h3 id=&quot;boxcollider2d&quot;&gt;BoxCollider2D&lt;/h3&gt;

&lt;p&gt;A collider is a very important component when you want objects to
interact with each other. Note that in some cases a rigidbody will be
needed for colliders to work if physics are involved. But in this case,
we just want the collider so that we can tell if it overlaps with
another collider. To do so we can use a method called:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;void onTriggerEnter2D(Collider2d collision)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This method has a Collider as a parameter to it because it is called
when the collider of the game object overlaps with a different collider
and that other collider is the parameter here, so that we may access it
if needed. In this method we will want to check that the object collided
with is a certain type and destroy itself if so. One way to check this
is to look at the tag of that game object. This is a word that we can
attach to any game object to differentiate it from others. It is called
like so:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gameObject.tag&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;reworking-laser-logic&quot;&gt;Reworking Laser Logic&lt;/h3&gt;

&lt;p&gt;Now we can put these concepts together and form a script. However, if
you think about what this object will be doing and compare it to the
Laser, it will be very similar except for direction. We can just edit
the Laser script and generalize it, so we should be able to set the
speed to be negative and still have the bound logic work. A simple
absolute value of the position should work for that comparison.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mathf.Abs(Number)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even though the asteroid will be moving down to say -60 at -15 speed,
its position can be treated as positive, and the bounds will be positive
just in the comparison. This will work for both the Laser and Asteroid.
And we will also just need a string variable that will be the tag that
will be checked for to destroy the game object.&lt;/p&gt;

&lt;p&gt;So now we can apply these changes and add the collider logic to the
Laser script like below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And remember to add a box collider to the Laser prefab too, now that it
should have one.&lt;/p&gt;

&lt;p&gt;And you should also go into the inspector for the laser and asteroid and
click on the tag button up top, this will drop down a menu where you can
add and set tags. You will want to add a Laser and Asteroid tag to use
for the respective objects for now.&lt;/p&gt;

&lt;h2 id=&quot;asteroid-spawning&quot;&gt;Asteroid Spawning&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/fJwzA8PrQ2A&quot;&gt;Spawner&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://youtube.com/embed/fJwzA8PrQ2A&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image19.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have the asteroid concept done, we will need to make a way
to spawn many of them randomly.&lt;/p&gt;

&lt;h3 id=&quot;spawner-object&quot;&gt;Spawner Object&lt;/h3&gt;

&lt;p&gt;We can create a new empty object in the hierarchy but this time we
won't need to add any components to it. We can just have it exist and
use it to run a script.&lt;/p&gt;

&lt;h3 id=&quot;spawner-script&quot;&gt;Spawner Script&lt;/h3&gt;

&lt;p&gt;We can make a new script and call it spawner or something and now we
will need to figure out some logic for it. We need to make the asteroid
into a prefab like we did with the laser to use as a reference, and to
spawn it in we will want some range of values to spawn it into since it
should be randomly around the screen, which also means we will need a
number to use as a chance to spawn it too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public GameObject Asteroid;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public Vector2 Rangepublic float Height&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Random.Range(-10, 10)&lt;/strong&gt; returns a random integer from -10 to 10 while
being &amp;lt; 10&lt;/p&gt;

&lt;p&gt;So, each frame we can check if a random number for some range we decide
is less than the chance we want and if it passes then spawn an asteroid
above the screen with a random x coordinate in the range, we give it,
like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can use the range as the bounds of the player and the chance
could be something like 0.05 to start but could be changed until a good
spawning rate is achieved through testing. This would mean each frame
has a 5 percent chance to spawn an asteroid, and that over 60 frames
means about 3 asteroids per second.&lt;/p&gt;

&lt;h2 id=&quot;health-system&quot;&gt;Health System&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/NZHLMlQwYVQ&quot;&gt;Health&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://youtube.com/embed/NZHLMlQwYVQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image21.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that the lasers and asteroids can spawn and interact with each
other, the next step is to let the player object do the same. We will
introduce a health system to use for the player.&lt;/p&gt;

&lt;h3 id=&quot;health-script&quot;&gt;Health Script&lt;/h3&gt;

&lt;p&gt;So, we should have a number to represent that amount of health we have
and we can take some away every time the player collides with an
asteroid, and as most retro games do, we can make the player immune for
a small damage animation. We already know how to deal with collisions,
but we will need a new concept to handle the immunity and damage
animation. This will be the IEnumerator method, a function from the
System.Collections library we can make a reference to. These are
functions we can write that will run alongside your scripts, unaffected
by framerates. It appears similar to how other functions or methods are
defined, like so:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IEnumerator Take_Damage()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;StartCoroutine(TakeDamage())&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this function we can make the player immune, flash the sprite on and
off, then make the player not immune. To do this we will need a way to
disable the sprite, like so:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SpriteRenderer Sprite&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sprite.enabled = false&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can set the enabled variable of a SpriteRenderer to true or false to
turn it on or off. And then to add some time between the flashes we will
need a way to wait some time, like so:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;yield return new WaitForSeconds(numSeconds)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This line will cause the now branched function to wait the number of
seconds given in the parenthesis, which could even be a decimal number.
In a regular update function you would not be able to wait to continue
executing code. We could loop these concepts a few times to get the
flashing effect we want. A for loop will do. This sets a variable and it
can increment it until it reaches a limit, which is useful for looping a
set number of times. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;for(int i = 0; i &amp;lt; MaxNumber; i++)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This sets a new variable ‘i’ to zero and increments it by 1 (i++) and
runs whatever code is inside it until ‘i’ does not satisfy the
conditional (i &amp;lt; MaxNUmber) in the middle. This can cause us to run the
code inside the for loop a certain number of times.&lt;/p&gt;

&lt;p&gt;Putting all these concepts together we can form the Health script for
the player like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image22.png&quot; alt=&quot;&quot; title=&quot;Inserting image...&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;health-bar&quot;&gt;Health Bar&lt;/h3&gt;

&lt;p&gt;Now that the player has a health value, we can set a visual on screen to
show it. This will simply be a Sprite on screen that has its image
changed each time the player's health is updated. To do this we can add
two variables to the health script, a SpriteRenderer that is a reference
to the sprite on screen, and an array of Sprite images we can swap to.
An array is like a list of elements with a fixed size, and you can
access each member of that list through an index. It appears like so:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public int[ ] Numbers&lt;/strong&gt; *This is an unset variable that references
an array of integers.*&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;int Variable = Numbers[3]&lt;/strong&gt; *This is how you can call a certain
element from the array.*&lt;/p&gt;

&lt;p&gt;We can set a public array through the editor so no need to worry about
initializing it through the script. There are cases where that would
happen and in those cases there are functions that can find certain
objects or components and returns an array you can use to set it.&lt;/p&gt;

&lt;p&gt;So now that we can use an array of Sprites that contain health bars that
relate to different levels of health, we can figure out a clever way to
index it such that we can use the health as an index. This means that
since the amount of bar variations or the length of the array should be
equal to how much health the player has, we can use the health amount as
a way to access the health bar associated with the amount. For example
if health is 0, then we can use the sprite at 0 index in the array, and
with health 1 we can sue index 1, etc. To make an array of sprites we
can just do this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public Sprite[ ] Sprites&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this logic, whenever the player health is updated, we can just set
the health bar sprite to whatever sprite is at the index in the array of
the new health amount, as seen in the updated health script:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;exporting&quot;&gt;Exporting&lt;/h2&gt;

&lt;p&gt;Before exporting it is a good idea to add a line of code to a script
that is always active that will let you quit out of the game without
having to manually close the application. We can use this line of code
in an update function, probably the frame rate one:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If (Input.GetKeyDown(KeyCode.Escape)) Application.Quit();&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is much more you could do to add to this game, or any game, but
eventually you are going to want to make a build for it whether it is
finished or not, to see what the finished product would look like at
this moment, or to save a previous copy of a game you may be updating.
To build your game, or export the application into a file, you can go
into the menu through file and click build settings.&lt;/p&gt;

&lt;p&gt;Here you will see the scenes the game thinks it should export and how
Unity will export it, such as how it will be windowed or what platform
it will be for. If the scene you want is not in the build, make sure to
click 'add open scenes' and then click build. This should then work on
exporting your game into your computer's file system that you can play
outside of Unity.&lt;/p&gt;

&lt;p&gt;Additional Content for Visual Appeal, not Needed for Gameplay:&lt;/p&gt;

&lt;p&gt;Stars in Background&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/snh7_DLc3KQ&quot;&gt;Stars&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://youtube.com/embed/snh7_DLc3KQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image24.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Camera Shake&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/iixnz-1dFBs&quot;&gt;Camera&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://youtube.com/embed/iixnz-1dFBs&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/UnityGame/image25.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C# Concepts Covered&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Variables, Classes and Methods&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sprite Renderer / Sprites&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Rigidbody Physics&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Vectors&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Input&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Conditionals&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spawning Prefabs&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Collisions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Random Numbers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IEnumerators&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Loops&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Arrays&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Unity Concepts Covered&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2D Game Development&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Editor Layout&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Components&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Positioning&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Testing Game&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Building/Exporting Game&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="project" /><summary type="html">Making a Game in Unity</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2020/09/22/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-09-22T10:03:30-04:00</published><updated>2020-09-22T10:03:30-04:00</updated><id>http://localhost:4000/jekyll/update/2020/09/22/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/09/22/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Design CNC Machines</title><link href="http://localhost:4000/project/2020/09/22/CNC-Machine.html" rel="alternate" type="text/html" title="Design CNC Machines" /><published>2020-09-22T10:02:30-04:00</published><updated>2020-09-22T10:02:30-04:00</updated><id>http://localhost:4000/project/2020/09/22/CNC-Machine</id><content type="html" xml:base="http://localhost:4000/project/2020/09/22/CNC-Machine.html">&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image107.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-kickoff-and-design-ideology&quot;&gt;&lt;strong&gt;1. Kickoff and Design Ideology&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;1-kickoff--introduction&quot;&gt;1. Kickoff &amp;amp; Introduction&lt;/h2&gt;

&lt;p&gt;This class intends to flesh out the process of designing and building a
CNC (computer numerical control) machine as a gateway to the magic of
project based engineering. The project should build skills and impart
grander project structure advice along the way. Practical skills covered
include: terminology, using CAD (Computer Aided Design), design for
manufacturing, concepts in robotics and mechatronics, and much more! On
a grander pedestal: we hope that going through these materials will
impart wisdom about the thought process behind successfully completing
practical engineering projects.&lt;/p&gt;

&lt;p&gt;The class is designed to follow my design process step by step,
including useful information and knowledge. This structure affords
engineers the ability to spread themselves only across the parts they
will benefit the most from.&lt;/p&gt;

&lt;h3 id=&quot;structure&quot;&gt;Structure:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Introduction and Design Ideology (You’re already here)&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;A slightly dry kickoff to design ideology in simple terms of
what to do on a high level when starting a project and some
thinking exercises.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CNC Hardware for Beginners&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;A high level overview of terminology, units, electronics,
robot control, linear motion, and standards. Brief but
targeted understanding of the background requirements for a
CNC machine.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CAD and Linear Motion&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;3D CAD ramp up from beginner to intermediate as a jumping off
point for the more practical half of the materials. With an
introduction focusing on visualizing the moments and basic
physics concepts and choosing fasteners, bearings, and general
hardware.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Design for Manufacturing&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;School of hard knocks lessons split between more advanced
design information and making better CAD. Design information
covers an explorative look at the limitations of materials,
tolerances, and advice for different forms of manufacturing.
Practical side focuses on implementing the new knowledge into
existing CAD designs for a new revision.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Epilogue, What’s Next, and Why It’s All Important&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Calibration, safety, and software implementation plus machine
usage including basic CAM and an overview. Final tidbits about
how you can use an “okay” CNC machine to make a better one.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2-design-ideology&quot;&gt;2. Design Ideology&lt;/h2&gt;

&lt;p&gt;For our purposes, think of engineering as the field of taking a large
group of non-intersecting requirements and inputs and developing a way
to convert them into a desired output. Simply, this definition reduces
big engineering challenges to simple solvable problems. It’s just the
knowns and the unknowns. This is important because there are a lot of
ways to solve a problem and finding one of the best ones early will save
time and money.&lt;/p&gt;

&lt;p&gt;I want to set out a few tenets of finishing engineering projects:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Simplicity is every engineers best friend&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mistakes are inevitable, revisions are the key to successful
projects&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The earlier revisions are made, the faster and cheaper they are&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are no failed projects, only unfinished work. The practical
component of this wisdom is that projects that work and work well need
to be revised, revised, revised, and revised again. To this end, it is
in the engineers best interest to remove as much friction from the
process of continued revisions as possible. But keep in mind, revisions
need to occur in specific relation to final functionality. It is
possible to spend too much time adding too many elements. This is known
as feature creep. There is no easy answer of when to add a new feature
or to change a feature, but going into a project with a clear list of
requirements and sticking to them is essential. Like anything, mistakes
and pitfalls mark the path but an open mind and adherence to the tenets
I’ve set here are a reasonable start.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Start a Project?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is always best to start with clear intentions. For this CNC project,
I started with the big picture: what do I want my final product to do?&lt;/p&gt;

&lt;p&gt;Requirements (the robot must…):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Be able to draw to a reasonable degree of accuracy within a
roughly poster sized work-area. &lt;span class=&quot;underline&quot;&gt;Note:
Keeping things vague is okay; but if you aren’t specifying it at
the beginning, always assume the easier. In this case, lower
accuracy.&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Have an efficient, minimal, and inexpensive frame.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Have three motors in total, one for the x-axis, one for the
y-axis, and a third motor for the z-axis to raise and lower the
pen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Be easily manufactured with a 3D printer, some basic hex drivers,
and a hacksaw i.e. the end user shouldn’t need an advanced fully
stocked factory to get through the build.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Largely rely on off the shelf electronics to keep costs low and
access to online debugging assistance high.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Rely on simple modular parts so that if I decide to change the
final use case or build a similar machine I don’t have to redesign
and print many parts.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;As we’ll get into later, many CNC machines like 3D printers,
laser cutters, pen plotters, milling machines, hot foam
cutters, etc… rely on common kinematics and electronics. But
CNC milling machines (especially the ones that cut metal) have
to have far more rigid frames.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Have a simple pen holder that is functional and allows for a
modest variety of pens. (Pencil/bic up to maybe sharpie).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When composing a similar list of your own, don’t be afraid to add
requirements that limit the scope of the project. Requirements like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Can’t cost more than $250 to make&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can only use M3 fasteners (or whatever screws or bolts currently
owned)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is the best CAD software?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It is the one that the engineer works best in, but it’s also a trick
question. As of my writing this, the only CAD software that can flesh
out complex ideas in seconds is old fashioned pen and paper.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image85.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fig. 1, an example of the level of detail an extremely neat engineering
drawing should include. Simple circles, boxes, and arrows with rough
dimensions should suffice. Sketches like this are powerful but can only
function when the designer finds their own work legible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Any engineering project should start with documentation on the specific
needs, both functionally and physically. The fun work can only begin
with a clear list of objectives and constraints in place. The ideas
phase should be as simple as thinking about different novel solutions
and drawing them on paper. Taking some time to visualize motion, key
steps in the function, the assembly, and manufacturing quickly aids the
selection of ideas that are more practical.&lt;/p&gt;

&lt;p&gt;The cost of any changes to a project go up exponentially as projects
gain momentum and a base of research. Which is why cheap and fast tools
like this are so essential.&lt;/p&gt;

&lt;h2 id=&quot;3-an-application&quot;&gt;3. An Application&lt;/h2&gt;

&lt;p&gt;In one of its most simple forms, any CNC machine(such as a laser cutter,
3D printer, robot arm, milling machine etc) is just a device developed
to move around in a certain coordinate plane. Note figure two and
consider how many motors (or manipulators) it would take to move a robot
from the origin to the point &lt;em&gt;P&lt;/em&gt;(3,5).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fig. 2 A Cartesian Coordinate plane with two axes (x &amp;amp; y). Note the
variation in possible locations that can be reached within the marked
bounds of 0-10 on each axis.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you only need to move &lt;em&gt;between the two points P(3,5) and the origin&lt;/em&gt;,
that can easily be achieved with a single stationary motor. This single
motor configuration can be achieved in any number of ways but two
examples are a motor attached to a leadscrew (turning the rotational
motion into linear motion) or a motor placed between the two points with
an armature or reach allowing a purely spinning motion to move between
the points. It can be easy to overthink challenges and hard to leave
behind those assumptions. With two motors we have a lot more freedom, we
can access an arbitrary number of spaces in this coordinate plane. This
distinction is very important as cases where we don’t need the
versatility offered by the extra motor can be greatly simplified with
its absence.&lt;/p&gt;

&lt;h2 id=&quot;4-an-exercise&quot;&gt;4. An Exercise&lt;/h2&gt;

&lt;p&gt;Exercise: &lt;em&gt;Given a two-dimensional coordinate plane (shown in figure 2),
design a simple mechanical system that can reach any given point using
its own motors. Note at this point, all “designs” should take the form
of a basic sketch showing the functionality and placement of components.
Then design &lt;strong&gt;two more&lt;/strong&gt; different systems to fulfill the same criteria.
With three simple designs drawn out, compare them. Which would you
rather make? Do you think some will be easier to program than others?
Try to articulate specific reasons why some are better or worse.
(&lt;strong&gt;Hint: Use paper and if you get stuck try thinking about cars
navigating from top down, polar coordinate systems, or vectors. Don’t
spend more than five minutes on this if you aren’t enjoying it!&lt;/strong&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-cnc-hardware-for-beginners&quot;&gt;&lt;strong&gt;2. CNC Hardware for Beginners&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;1-introduction-to-hardware-and-movement&quot;&gt;1. Introduction to Hardware and Movement&lt;/h2&gt;

&lt;p&gt;This lesson is about thinking of the challenges involved in all levels
of getting objects from one discrete location to another with
repeatability. The main focus of this class is linear automation systems
that require getting to an arbitrary number of positions along a certain
route or within the size constraints of the machine. I will also be
touching on some elegant solutions to scenarios in automation that only
require repeatable translation between specific a and b positions.&lt;/p&gt;

&lt;p&gt;For this project specifically, we already have a list of design
constraints or requirements drawn together in part one and at least a
few ideas of how to actualize a design. The next step for us is to bring
those paper drawings into the real world with an understanding of drive
systems and hardware.&lt;/p&gt;

&lt;h3 id=&quot;learning-the-linear-motion-lingo&quot;&gt;Learning the linear motion lingo&lt;/h3&gt;

&lt;p&gt;Most linear motion, movement in a straight line for controlled
distances, is a combination of a motor, a way to convert rotation to
desired translation, and a mechanical structure to support the moving
parts and whatever is being moved. Typically the conversion of
rotational to linear motion occurs using either lead screws or belts,
but there are hybrids and many other possible solutions.&lt;/p&gt;

&lt;h2 id=&quot;2-hardware&quot;&gt;2. Hardware&lt;/h2&gt;

&lt;h4 id=&quot;belts-or-timing-belts&quot;&gt;Belts or Timing Belts&lt;/h4&gt;

&lt;p&gt;The big advantage of belts is their low cost and versatility. Belts are
extremely cheap and don’t have special shipping concerns (unlike lead
screws which can bend easily making them useless). They are almost
perfect. Before I ruin the magic, check your understanding by looking at
fig. 3 below. The main limitation of a belt is that it is not rigid.
Some CNC milling machines will still have them, but they are for cutting
very soft materials. In a milling machine, when the cutting starts,
excessive forces can cause the belt to stretch and the machine to lose
accuracy. Flex creates the enemy of the CNC milling machine: backlash.
Backlash is the play between components in a mechanical system and the
best CNCs need to maintain almost none.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fig. 3 a linear motion system driven by a belt. The ends of the belt on
the right and left sides are fixed so as the motor (the large, central,
silver wheel) turns, pulling the axis in either a left or right
direction.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Okay you may ask… What about a belt like thing that isn’t slippery or
flexible? Some kind of metal belt like thing would be interesting.&lt;/p&gt;

&lt;h4 id=&quot;chain&quot;&gt;Chain&lt;/h4&gt;

&lt;p&gt;Great point. But think about how a chain works. Metal plates bolted
together rigidly in specific link sizes. Can you guess what problems I’m
going to bring up? The three problems are tensioning, efficiency, and
noise. Exact distances between the sprockets are difficult to achieve
with chains because the loop sizes are “quantised” by the individual
links. This means that the chain often won’t be the exact right size for
a given system. This creates the problem of how to tension the chain
while maintaining efficiency. Really tight chain will have the least
play but it will also be the hardest to turn. Fundamentally, the chain
is designed to be a high power and very efficient transfer system, but
it suffers at higher RPMs because of the number of moving parts and it
isn’t designed to transfer loads without backlash. But with all of that
said, there are a lot of smart engineers like you who have found work
arounds that make chain work. Checkout the maslow CNC in fig. 4 which
uses a carefully weighted gantry to ensure the chain keeps the right
tension in action. Maslow’s main consideration with adopting a chain
drive is their need for ultra cheap mechanical components in a very
large form factor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fig 4. Maslow CNC machine which uses a weighted freehanding gantry and
chains that are sprung and weighted for tensioning. It is designed to be
an inexpensive huge CNC mill for wood.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;leadscrews-and-threaded-rods&quot;&gt;Leadscrews and threaded rods&lt;/h4&gt;

&lt;p&gt;Screws are typically defined with two numbers, the diameter and the
slope of the helix pattern. The latter is often discussed as the number
of “teeth” per distance. This consideration is important because it is
part of the mechanical advantage the machine has. If you have a very
fine pitch or high rate of the teeth the machine will exert much more
torque on the workpiece but it will also move much slower. If this
doesn’t make sense, think of the screw and its pitch like a gear
ratio. The pitch is really just a way of saying how far the screw will
force a nut to move per single rotation of the screw. The classic
dilemma: speed or power. The reason that a typical bolt-esqe screw isn’t
often used in CNC machining is because of backlash. Screws are really
bolts and bolts don’t need to be very precise, they are designed to be
tightened till they bind and hold in place. Bolts and nuts have a lot of
play. If you hold a bolt with an engaged nut in hand, you can quite
easily notice that the nut can slide up and down slightly. This means
that the rotation of the screw doesn’t perfectly correlate to the final
nut position relative to the bolt. In figure 5, we can see why this
happens. The nut has to be made larger than the screw for it to engage
on the thread and that means that the screw has to re-engage the nut
each time it changes directions. That means that over time, the nut
isn’t moving along the thread as much as the thread is moving. This is
backlash in action again. Figure 6 shows a nut engaging each direction
of the screw using a spring.&lt;/p&gt;

&lt;p&gt;The spring forces the two nuts apart and keeps them engaged so as the
screw rotates the nut moves at the same rate even during direction
changes. This is called an anti-backlash nut and it’s a screw-like
system that was standard in tools like requiring linear motion for a
very long time. But there is still something better out there for
wonderful precision and power.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image101.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fig. 5 shows how a nut can only be engaged in one direction at a time,
and when the direction of the thread changes there is some lost linear
motion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fig. 6 shows two sprung nuts, in much the same orientation as the nuts
in figure x but as a more tangible solid part.&lt;/p&gt;

&lt;h4 id=&quot;ball-screws&quot;&gt;Ball Screws&lt;/h4&gt;

&lt;p&gt;The undisputed king of CNC is the ball screw. Ball screws work by
creating a totally different kind of engagement between a “nut” and the
helical slot. Instead of the sharp screw edges, ball screws use smooth
soft semicircular helical surfaces. They get the name from their
intermediary ball bearings which lie between the “screw” and the “nut”.
In a ball screw system the nut and the screw never actually touch. As
the ball screw rotates the nut is moved along by a series of small ball
bearings that move with the screw until they reach the bottom of the nut
where they are re-channeled around the outside back to the top. This
design reduces friction and backlash as the tolerances between two round
edges are easier to control.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image140.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fig. 7 depicts the ball bearing orientation inside a ball screw nut.&lt;/p&gt;

&lt;p&gt;Quick note on how we join motor shafts to lead screws, threaded rods, &amp;amp;
ballscrews.&lt;/p&gt;

&lt;h4 id=&quot;couplings&quot;&gt;Couplings&lt;/h4&gt;

&lt;p&gt;The world is far from perfect and no rotating bodies will ever line up
perfectly. It is very important to consider how the rotational motors
will actually connect to the linear rods. This is less of a concern with
belts because they are naturally flexible and work to remove much of
these problems on their own. On a lot of early 3D printers, makers just
shoved aquarium tubing on the motor shaft and the linear rod and then
added many zip ties. Which actually works very well as long as there is
a force, like gravity, holding the rod down on the motor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image138.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fig 8, an adequate coupling built from zip ties and flexible tubing.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are slightly better ways to couple linear motion components once
you have a 3D printer available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image135.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fig 9, shows a simple and fairly rigid 3D printed coupling.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The next tier of coupling quality on this kind of project are spring or
flexible coupling which are manufactured to a higher quality
professionally and are, despite their name, still more rigid than either
of the previous mentions. The reason there are helical cuts that make it
springy are to account for imperfect alignment between the shaft and
screw.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fig 10, is a cheap and widely available flexible coupling&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finally, one of the best coupler designs is a semi-flexible oldham
coupling. They have a distinct look, the stark color contrast of the
brushed aluminum finish and a bright softer middle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fig. 11, an oldham style semi-flexible coupling. Note the red middle is
a rubber material and typically called the spider.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This brief jaunt into the magical realm of couplings is included as a
capstone for building linear motion with leadscrews. Good couplings are
important to get the best out of a leadscrew or ball screw. We are now
at our first real hardware crossroads and I want to take this
opportunity to continue to highlight the variance of engineering
solutions, each with their own reward structure.&lt;/p&gt;

&lt;h2 id=&quot;3-the-right-linear-motion-system-for-you&quot;&gt;3. The Right Linear Motion System for You&lt;/h2&gt;

&lt;p&gt;In order to decide on a linear motion system it’s important to refer
back to the design constraints we set out earlier. This should always be
the baseline in making an important decision.&lt;/p&gt;

&lt;p&gt;Here are the relevant parts from our design requirements list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Have an efficient, minimal, and inexpensive frame.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Be easily manufactured with a 3D printer, some basic hex drivers,
and a hacksaw i.e. the end user shouldn’t need an advanced fully
stocked factory to get through the build.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Largely rely on off the shelf electronics to keep costs low and
access to online debugging assistance high.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Rely on simple modular parts so that if I decide to change the
final use case or build a similar machine I don’t have to redesign
and print many parts.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these considerations in mind I settled on the cheap and simple
belts for my CNC design. I don’t need the force that stronger linear
motion can lay down and I don’t really want the added weight either. I
am also going to start thinking about how I want to ensure smooth
sideways motion. What kind of bearing system am I going to use? I want
to take an idea from other low cost CNC designs and use my frame as a
linear bearing. This is getting more and more popular with 3D printer
designs. Typically these motion systems work using extruded aluminum
frame components and special rubber coated bearings very similar to
skate bearings to ride in tracks along the framing materials. This means
I can have a fairly rigid aluminum frame without having to deal with as
many different parts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image106.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fig 12, shows a linear slide built with roller bearings in aluminum
extrusion.&lt;/p&gt;

&lt;h2 id=&quot;4-what-does-a-mill-look-like-electrically-what-will-yours-look-like&quot;&gt;4. What does a mill look like electrically? What will yours look like?&lt;/h2&gt;

&lt;p&gt;The robot or machine we’re constructing is powered by motors and
electronics so how do we select them and why should we choose one style
over any other? Firstly it’s important to discuss motors. Motors are
probably the most important choice when it comes to electrical
configuration of your CNC project. There are AC and DC motors. For the
scope of this project we can focus on DC motors. AC motors are more
widely used in industry and appliances but are more expensive to control
and don’t work as well with a dynamic range of speeds. DC motors are
cheap and ubiquitous in the DIY community. The types of DC motors to
know are: brushed DC motors, brushless DC motors, DC servomotors, and DC
stepper motors. Brushed DC motors, which is what most people mean when
they say “DC motors”, have no intrinsic position control. You can vary
the power into them, but need an external sensor for accurate control.
Brushless motors are much the same, but more efficient and often much
faster and more powerful. This can be a winning combination, but to use
it in this application you’ll still need a precise external sensor to
check the position. Typically people use either a potentiometer or an
encoder. DC servomotors and steppers both have precise position control
so they are going to be best for this application. As a cost of their
position control, they both lack power and torque compared to similar
brushed/brushless motors.&lt;/p&gt;

&lt;p&gt;Servos are really fast and can be dialed in to be precise but most
aren’t designed for long periods of constant load and lose all
precision when they aren’t limited to 180 degrees of rotation. Steppers
are pretty much the perfect motor for this kind of system. Stepper
motors can move forward or backward in “steps”, and they generally have
200 steps per full rotation meaning they can move precisely in 1.8
degree increments. What makes this motor precise is that we can choose
which of these steps to move to at any time. Stepper controllers can get
much more precision by moving to spots between these steps to allow for
finer position control. This is called microstepping and is important if
you want to improve the accuracy of your machine. I will note that this
brief description is nowhere near a good enough look at motors for wider
project usage or even to gain the important wisdom on how these motors
work. Specifically, for the necessary deeper dive I highly recommend the
book “Motors for Makers: A Guide to Steppers, Servos, and Other
Electrical Machines[1]”.&lt;/p&gt;

&lt;p&gt;So I’m using stepper motors and I’ve explained why, but what do we need
to use to control steppers in the first place? It can be a little
complicated but really it will always be a thing that converts power and
digital control wires to physical motion, and something to send those
digital controls to that converter.&lt;/p&gt;

&lt;h3 id=&quot;the-big-picture&quot;&gt;The Big picture&lt;/h3&gt;

&lt;p&gt;There are three main parts to an operational CNC machine. Firstly, there
is the CNC milling machine itself, the thing we’ve been designing so far
with its motors, linear slides, and spindle. Secondly, there is a
“control box” that’s in charge of physically telling the motors what
to do. This control box is typically powered by an embedded
microcontroller that controls the motors (through motor driver circuits)
while taking commands from the third and final component, a computer
that runs special software to generate coordinates that the machine can
understand. There are many other potential inputs that go into the
embedded microcontroller. There will likely be “end stops” or limit
switches for each axis that zeros the machine so it knows the exact
position of each axis each time it powers up. I also like to have an
external emergency stop or E-STOP. Otherwise known as: a big red panic
button that occasionally has to be stressfully slammed to stop the
machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image64.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fig 13, is an assembly of a CNC electronics stack featuring power
supplies (left), four stepper drivers (top right), and a microcontroller
(bottom right). It is missing a computer sending cam or instructions
directly to the microcontroller&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;motors-and-stepper-drivers&quot;&gt;Motors and Stepper Drivers&lt;/h3&gt;

&lt;p&gt;For the reasons we discussed earlier, in the hobby space, the vast
majority of CNC machines use DC stepper motors. The physics and exact
functionality of these motors isn’t extremely important. What is
important is that stepper motors have some behavioral quirks that other
motors don’t share. Firstly, stepper motors have peak torque at a
standstill andlose torque as their RPM increases. Secondly, there is a
much smaller variety of motors due to the standards created by the
National Electrical Manufacturers Association or NEMA. They use three
standard sizes for projects: NEMA 17, NEMA 23, and NEMA 34. The numbers
correspond to motor width in tenths of inches. The NEMA 17 motor is 1.7”
or 1.7 inches across.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Motor Type:&lt;/th&gt;
      &lt;th&gt;Motor Size:&lt;/th&gt;
      &lt;th&gt;Typical Torque:*&lt;/th&gt;
      &lt;th&gt;Price Per:&lt;/th&gt;
      &lt;th&gt;Stepper Driver Price:&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;NEMA 17&lt;/td&gt;
      &lt;td&gt;1.7”&lt;/td&gt;
      &lt;td&gt;60 Ncm&lt;/td&gt;
      &lt;td&gt;$13.99&lt;/td&gt;
      &lt;td&gt;$2.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NEMA 23&lt;/td&gt;
      &lt;td&gt;2.3”&lt;/td&gt;
      &lt;td&gt;190 Ncm&lt;/td&gt;
      &lt;td&gt;$25.99&lt;/td&gt;
      &lt;td&gt;$24.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NEMA 34&lt;/td&gt;
      &lt;td&gt;3.4”&lt;/td&gt;
      &lt;td&gt;1200 Ncm&lt;/td&gt;
      &lt;td&gt;$69.99&lt;/td&gt;
      &lt;td&gt;$50.00&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Table 1. Note that the typical torque is dependent on the length of the
motor. Also note that each stepper motor doubles the cost of the last
but has substantially higher torque per dollar.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nema 17s are pretty small and weak but their popularity among 3D printer
designers has massively brought their costs down making them a focus for
the requirements of this class. All NEMA motors are available in a
number of different depths which grant more customization and overhead
on the typical torque numbers from the table. Note that depth
corresponds to the physical area of the magnetic surfaces inside the
motor so they can apply more force. For this drawing robot project,
there are no cutting forces so we might as well opt for the cheap and
easy option of the NEMA 17.&lt;/p&gt;

&lt;h1 id=&quot;3-cad-and-linear-motion&quot;&gt;&lt;strong&gt;3. CAD and Linear Motion&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;

&lt;p&gt;We are finally going to choose CAD software and start moving things
toward the physical realm. I am using Fusion 360 in this section but
much of the information should hold for other CAD softwares.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CAD and Linear Motion&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;An overview of working in Fusion&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3D CAD ramp from beginner to intermediate and a jumping off point
for the more practical half of the materials.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A few tips&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Discussion of several devices and the complexity of making full 3D
models&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: The best CAD software is doodling on paper as discussed before as
it is the fastest way to begin to flesh out ideas. The second best CAD
software is the one you are most comfortable with. I have used several
and find that Fusion 360 is the least terrible. I can work quickly in it
and find many of its features very convenient, so it is the focus for
this section. Even if you want to use solidworks or another software
package, try to find some of the tools I recommend here as many software
packages will have them and they are very good at saving time.&lt;/p&gt;

&lt;h2 id=&quot;2-working-in-fusion&quot;&gt;2. Working In Fusion&lt;/h2&gt;

&lt;p&gt;When you first open Fusion 360, after you are prompted to sign in you
will see a home screen that looks like the one below. Minus the crudely
drawn colorful rectangles of course. The rectangles are placed on the
screenshot below for a brief explanation of all of the parts they
represent. The pink rectangle at the top is the least important to
explain. All of the icons in the pink rectangle have an information
dialog box that will pop up if you hover the mouseover them, meaning
that they don’t really need to be explained in great detail here. The
icons are all about making changes to or formulating the design. The
blue and magenta boxes (in the upper left and right corners) and the
brown box at the bottom are all about observing the file and it’s parts
and history. The green box positioned in the lower center is the display
and interaction settings block which is the place to go for customizing
input controls, display colors, and the view style.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image89.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The brown box at the bottom encapsulates the timeline of a design file.
This will track changes as they occur. It is empty or unpopulated at the
moment because the file has just been opened. The timeline allows you to
go back in the file history and make changes at different points. The
system will then regenerate a new timeline with those changes, often
without needing to fix merge conflicts. This is huge. If you make a
mistake, you can simply go back in time, fix it and then the part(s)
will totally regenerate from that point without further changes.&lt;/p&gt;

&lt;p&gt;The purple box, located in the upper right corner is the view cube. You
can click on any of its sides that are visible to move the camera to
that perspective. Generally it is more useful to click and drag on a
face to move the camera around for more fine control. If you do this
before you’ve actually made any geometry in Fusion, the results will be
pretty uninteresting.&lt;/p&gt;

&lt;p&gt;The blue box shows all the entities that exist in the file. These
entities are generally restricted to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Sketches&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;These are the flat planes with sketch geometry on them that
make up the bases of all of the 3D geometry in your CAD file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Components &amp;amp; Bodies&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Understanding the difference between components and bodies and
the broader reasoning for those differences is key to
understanding the difference between Fusion and other CAD
softwares.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;In fusion, no matter how many parts are in an assembly, it all
takes place in one file. The way this one file (generally
.f3d) organizes parts and sub assemblies is within the
confines of components and bodies. A body is any self
contained piece of 3D geometry. Any number of bodies can make
up a component, but generally it is only one body per
component and then, you simply add more components when you
have more bodies. A component is kind of like a folder for
bodies. But like folders a component can have a component or
multiple inside it. This is how sub assemblies are organized.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;For a more in depth and user friendly explanation of this
dynamic: &lt;a href=&quot;https://www.autodesk.com/products/fusion-360/blog/components-bodies-for-new-designers/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;Fusion 360 Components &amp;amp;
Bodies for New Designers - Fusion 360 Blog
(autodesk.com)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Joints (sometimes called constraints in other CAD softwares)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Joints are user created rules defining how parts interact with
each other. If you want a bolt to stay in a hole, you have to
constrain it there. Joints can also be used to simulate
motion. You can define the gear ratio between rotating bodies
so when one is rotated the other will rotate the correct
amount relative.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;More details: &lt;a href=&quot;https://www.youtube.com/watch?v=Bw08O6XsfDI&quot;&gt;&lt;span class=&quot;underline&quot;&gt;Joints in Fusion 360: A
Comprehensive Tutorial! FF117 -
YouTube&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Construction Geometry (think planes that can be sketched on)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Construction geometry is an advanced tool for accessing parts
of a CAD file that can be difficult to get to otherwise. Much
like scaffolding in real life. Construction geometry is
advanced for the scope of most of our work but I think it’s
important to touch on here.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;For reference later: &lt;a href=&quot;https://www.hackerlab.org/en/blog/read/1342521194/using-construction-planes-in-fusion-360---bringing-your-sketches-to-new-heights&quot;&gt;&lt;span class=&quot;underline&quot;&gt;Hacker Lab
Coworking &amp;amp; Makerspace - Using Construction Planes in Fusion
360 - Bringing your sketches to new heights | Hackerlab
Global&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-a-few-tips&quot;&gt;3. A Few Tips&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Save time by grabbing CAD files of standard parts&lt;/strong&gt;. The full
McMaster-Carr 3D file catalogue is available at a few clicks of the
mouse. Having standard hardware from bolts to wheels to linear motion
components can save tons of time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sectional analysis. Use a plane to visualize the part cut into sections
so you can check that things fit well after they’ve been assembled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Modifying the appearance of different bodies. This can be done by
pressing “a” or through the menu below. It’s helpful to see parts as
they will appear in real life. If you don’t need “realistic” textures
and want to save time to get the same part differentiation effect you
can press “Shift” and “n” at the same time to turn on the component
color cycling tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image121.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An important step in reducing the number of revisions in any design
involves finding problems as early as possible. Draw parts before they
are designed to make sure they are possible to design. While making big
CAD assemblies consider putting in the extra work to add all the
fasteners so you know there won’t be space conflicts and putting in the
fasters gives you time to consider things like whether the fasteners can
physically fit in the spaces they are given while assembling the real
unit after manufacturing.&lt;/p&gt;

&lt;p&gt;Use the interference tool as a final check before 3D printing or
machining the parts in your model. The interference tool makes sure that
there are no parts occupying the same space letting you know that there
will be problems when you try to assemble the modeled object in real
life.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image132.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that when the Fusion opens the Interference tool it will ask you to
select which bodies or parts you want to check interference between. I
prefer to check interference across the entire model which can be done
quickly by selecting the entire assembly. The assembly is shown circled
in red below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image116.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-taking-it-further-and-developing-something-for-this-class&quot;&gt;4. Taking it Further and Developing something for this class&lt;/h2&gt;

&lt;p&gt;The real deliverable for this class is to make a simple assembly that
would function as a driven axis on a CNC system. To do this we will
require a small handful of basic parts. There will be a physical frame
composed of a base board, a bearing or screw support, and a motor mount.
There will be a motor and a moving platform. We will work together to
develop it all. Let’s start with deciding on a useful length. I’m going
to arbitrarily pick about 40cm long based on my desk. Now let’s grab our
base from McMaster-Carr. Throughout this section we will need to acquire
new parts for the assembly either by assembling them from drawings or
finding them through online resources. Before we get started let’s
follow the golden rule: make a drawing of what we’re trying to model so
we don’t get lost. The drawing doesn’t need to be perfect but it should
make sure that we understand what we’re trying to build and where to
start.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image103.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That central rectangle in the drawing above is really a piece of
aluminum extrusion. So let’s start there and with the “legs” or the
little risers that hold the unit off the ground. It’s always a good idea
to get a central part everything connects to out of the way quickly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image61.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note you may have to sign in to McMaster-Carr to download a step once we
find the right model. With a McMaster account we can download as many
models as we need for free. To get to the part we are looking for we can
navigate through the homescreen or just search Extrusion and click on
Metric and T-Slot and Framing. Note that there are lots of profile types
under the envelope of extrusion. For our design exercise we don’t really
care about the specific profile geometry but if you are building
something like this for real ensure you are buying V-groove stock as
bearings will run much smoother in it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image102.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next find this generic 20mm single profile in the 2ft length and select
3-D STEP and download. This will automatically add the part to your
Fusion 360 File.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s learn how to use the measuring tool to make sure our part is 2ft
long and to see how much we need to shrink it to use it in our assembly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image60.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The measure tool is very versatile. Here I have clicked on an edge of
the extrusion. The measure tool assumes this edge is a line and returns
the length of the line in the red box above. It will also measure the
distance between multiple distinct points or faces. In this case,
clicking the line is the fastest part.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image111.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we want to extrude the end of the aluminum so that it matches our
requirements. The equation I used to calculate that value is shown
below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can measure the extrusion again to see that it is the correct length
now. This process is remarkably similar to the way we would need to cut
down the material during the real world assembly. Let’s grab a flat face
on the bottom of the extrusion to make the foot to hold the bar off the
ground from the drawing (face highlighted using a lighter gray).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can press “p” to bring up the project geometry tool which allows you
to turn physical features and even parts of other sketches into your
sketch as lines or arcs to use. Simply click on something and voilà it
is now a piece of geometry you can use in this sketch. Now we’re
officially moving onto making new parts. Let’s start with a small one:
the Legs from the original sketch. Highlighted in red for your
convenience.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image130.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to see my final version before starting, here it is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Grab those two points on the end of the extrusion so we can set a box
equal to that length. The rectangle tool is inside the create menu and
grabbing the 2-point option allows us to make a rectangle and plop it
into that corner so that corner is locked in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It should look something like this. Next we need to start using the
sketch constraints. They are the red and grey tools called constraints.
All of them are very useful. It would be worth your time to familiarize
yourself with them, but for now let’s focus on the collinear tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image110.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Selecting this tool allows you to make two lines coincident.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click these two lines to lock the other edge of the rectangle to the
extrusion. You may notice that the more we work, the less blue in the
sketch. Blue lines are lines that are “unconstrained” or that move when
you drag them. It is often a good idea to remove all blue from every
sketch everytime. For the last blue line left in the sketch we need to
add a “dimension” or specified length. This tool can be used by hitting
the “d” key or in the create menu. Click the side of the rectangle
running from the top to the bottom and click again to look in the
dimension. Double clicking on the dimension allows you to edit it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next use the “point” tool to create a center point at the top. We’ll use
this to make a centerline for the mounting holes for the foot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image77.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sometimes it’s nice to make lines in our sketch that the cad software
won’t want to make features out of. This is called construction geometry
and it will be clear why it’s useful later. Find the highlighted top
left square in the sketch palette or hit “x” to activate construction
geometry. Make a line from the point we made in the middle of the top to
the bottom. Ignore the curvy left line in your drawing, it’s just to
demonstrate that construction geometry is dashed not solid lines. Press
“x” again to make sure it’s disabled for the next step.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image88.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make two circles. Ensure their center points are on the line when
placing them. The exact radius doesn’t matter yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A cool way to center objects when we only care how far they are from
each other is the following equation. When editing dimensions, Fusion
doesn’t care about units or even if you want to use math to calculate
the final answer (like Excel). Here we are using “d3” and “d4” which are
dimensions 3 and 4. You can add these to a dimension by clicking on them
once while editing another. This equation is really saying
(30.375-15.000)/2 so we can change the individual dimension of the part
but the holes will always autocenter. If this relationship doesn’t make
sense &lt;a href=&quot;https://forums.autodesk.com/t5/fusion-360-design-validate/how-do-i-create-relations-between-dimensions/m-p/6476813/highlight/true#M67110&quot;&gt;&lt;span class=&quot;underline&quot;&gt;check this
out&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now the real advantage of taking this time to make it work well comes
into play. We can change those random filler values from before as much
as we want and the holes will stay centered relative to their middle
point. 30.375 is less nice a max size than 30mm, and 15mm might be a
little wide.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image73.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re almost done with our first part. Just hit the finish sketch in the
top right corner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image100.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now hit the important Extrude button in the create menu (the second icon
on the top command bar).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Extrude the part out to 10mm. Make sure that the operation isn’t “join”
or we’d be adding to the aluminum extrusion instead of making a separate
part. This is important because separate parts can be 3D printed without
modification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image76.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The extrude dialogue box should look exactly like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image90.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a part, let’s add some pretty fillets to the edges.
Saves material too. You can fillet by hitting the “f” key or by clicking
the fillet button in the modify section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image137.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can decide to undo changes and modify things at any point in Fusion&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I decided I didn’t love the way this fillet looked and that I
wanted the foot to be smaller. So I used Control Z to undo the fillet,
then right clicked on the latest feature on the timeline and clicked on
“edit feature”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can now change the extrusion value to anything you want. I’ll go for
5mm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we want to make changes to the sketch we can use the browser to find
the sketch and modify or make it visible again. We can also use the
timeline for this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image74.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now have a part we can 3D print to attach to the extrusion as a kind
of “foot” so it rests off the ground. To secure it in place lets get
some bolts. To do this, we need to know how long they need to be before
they conflict with the metal so they can tighten any further. This is as
simple as pulling out the measure tool again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the measure tool and the 20mm extrusion profile we are using we
can tell we need an M5 screw that is shorter than 11mm. Let’s see what
McMaster has.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image91.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These look perfect. Let’s get the STEP file for them to add them into
our design. You can drag components around by clicking and dragging or
by using the move tool with the letter m. When we first place a new part
in a file, the move tool will be automatically used so we can use the
arrows around a part to drag in the corresponding axis. Many parts will
appear at the origin which in our case is already being used by the
extrusion. Move the screw so that it is outside the extrusion. Now we’re
going to use a joint or constraint to stop the part from moving around.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The joint tool can be brought up from the assemble menu and requires
grabbing a point on two objects as putting them together. Here we can
see the screw is see-through because I have already selected it. This
functionality is to make it easier to join things to parts they are
already in close proximity.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image127.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the part is flipped, use the flip tool to flip it back. The screw
should now be in place but we’ll need a second one to finish this foot
mount off. This can easily be done by copying and pasting the screw.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image139.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the second bolt pasted, I simply constrained it to the other hole.
Now that those screws are firmly in place, how do I stop everything else
from moving?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are simply going to ground the top piece of metal which will stop it
from being able to move relative to the origin and constrain the plastic
rectangle to it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image122.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image97.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fusion assumes all parts are a sort of default clean steel texture which
makes things ugly and confusing. As we now have four parts in our
assembly, I’d recommend taking the time to change the appearances to be
more realistic. I pressed “a” to pull up the appearance modifier and I
chose a bead-blasted aluminum texture for the extrusion, a teal green
plastic for the rectangle, and a black oxide coating for the bolts to
match their coating from McMaster. Check out the materials library and
feel free to select anything you want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now to keep things symmetrical, I’m going to copy the two screws and the
rectangle we just made and attach them to the other side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ah, starting to look like a real product now. Next let’s add the stepper
motor we discussed earlier. Here we have another decision. This part we
are considering adding to the design is a product that already exists,
which means like the extrusion and the screws the model already exists.
If you want practice modeling, I have included the drawing below, but we
can also source this motor from Grabcad.com or McMaster-Carr. Simply
search for a NEMA 17 of the desired length on either of those platforms.
I used Grabcad for mine because I liked the textures and appearance of
the model more.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image112.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The joints are always visible as small teal and white boxes. If you
don’t need to know exactly what’s joined you can turn these off by
hitting the joints folder in the browser and pressing v or clicking the
eye.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Small difference but worthwhile.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s get back to that motor. I imported it into fusion. Outside
files need to be opened from file &amp;gt; open &amp;gt; open from my computer&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image99.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It will almost always create the newly opened part on the world origin
at (0,0) which means it might be blocked by a bigger part already there.
That’s no problem though because any part can be moved easily by
selecting it in the browser and pressing “m” to use the move tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mmmmm, nice looking motor. Let’s create a sketch on top of the extrusion
to start the next part.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is my final version:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image75.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can start to move a little faster here. Let’s repeat the two hole
style design from the last part we made. You can even use those same
dimensions to set these distances so you only need to change one number
to change this parameter on the whole model. Open the parameters menu by
expanding the modify toolset.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on it will present you with a spreadsheet that will show you
all of the dimensions in the file so far. You can rename them something
memorable or keep calling them “d4” or whatever else. Here I have
renamed d4, d5, and d6 to more useful phrases and have set them to equal
the dimensions in this sketch. If this is still confusing, just set a
regular dimension. You’ll have time to look into this later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image133.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The motor has a big ring that comes up through the middle. I’m not sure
how big it is or exactly how wide the motor is in mm, so I’m just going
to throw out some numbers here. The diameter of the ring is easy to
measure so we can use the measure tool again. Open this with “i”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image126.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next let’s grab the four face mount holes and add them in. I’m going to
use a circular pattern available in the create menu to create the next
three.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image95.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You just need to select the “center point” in the menu and then click
the center of the big circle we made. This is the axis of rotation for
the circle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Remember to set the right number of total holes (4).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image86.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now just make some lines to contain everything we just made.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image68.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are super bad and not straight. Let’s fix them with sketch
constraints. We can start with the coincident constraint to lock the
corners at the top to the line formed by the outside edge of the
extrusion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image80.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next we can use another construction line to keep these points in line.
Hit “x” to switch to construction, “l” to make the line (ensure you are
clicking on the points of the shape), and finally “x” again to disable
construction geometry.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image87.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image84.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next use the horizontal/vertical constraint to lock the line flat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next we can use the equal sketch constraint to make these two angular
pieces equal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image63.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next we can use the coincident constraint to lock the construction line
to the end of the extrusion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mmmmm… Beautiful sketch. Let’s make it real. Hit finish sketch and then
the extrude button. This time no tricks just grab all the profiles and
extrude to 5mm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image134.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now joint the motor to the motor mount plate. You can use any of the
outer rim holes or the center hole.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that it’s joined, let’s look at it. I noticed a few issues
immediately. In red, the motor extends beyond the edge of the mounting
bracket. This looks a little shoddy. In orange, this is waaaay too tight
a fit. But in blue, it’s nice that there is room for the motor leads to
leave the motor. I have definitely forgotten that before.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image114.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The side view again shows issues. The motor is too tight against the
wall and our foot design is far too short. First things first. Let’s go
in and edit the sketch again. It’s important to expect mistakes, look
for them, and tackle them quickly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image79.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hit edit sketch on the timeline here. This can be more convenient than
using the browser if you just sketched it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I changed the diameter of the big circle to make it bigger, changed the
main offset to 22mm and removed the equal lengths of the square members
in favor of a second bottom dimension. The specifics of how it works are
less important than the final product.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image125.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click finish sketch and look at the software automatically fix
everything. What a nice looking motor mount.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image119.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It now looks really nice and doesn’t raise any red flags for me. This
motor will fit nicely in this mount. To celebrate before we deal with
the foot, let’s add some flourish to the part. I used the filet menu and
the appearance menu from before to make it look more polished. The motor
mounts with M3 screws. Pick ‘em up from McMaster (10mm long)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copied and pasted the screws three times, colored them black, and used
joints to position them in the holes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image72.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Really looking great.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image75.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s make the foot longer now. First we measure the difference to get a
minimum foot value. 14.20mm. So the foot has to be longer than that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image71.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m going to roll back the history to right after we first made the part
in the timeline.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image62.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I made a sketch right on the plane the screw heads are resting on and
made a circle bigger than the screw head around each of them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image131.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I then extruded the part around the screws out to 15mm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image105.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now cut back to the current time in the timeline. “Roll history marker
here”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is really starting to look great. I mean that. You’re doing a great
job.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image108.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we have a structure, a finished motor mount, and a motor to play
with. Let’s get the last round of parts before we’re finished. We’ll
need &lt;a href=&quot;https://www.mcmaster.com/3764N101/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;a cable
pulley&lt;/span&gt;&lt;/a&gt; for the stepper
motor, &lt;a href=&quot;https://www.mcmaster.com/3693N11/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;the same pulley
but&lt;/span&gt;&lt;/a&gt; a version with bearings
instead of one designed to lock into position around the motor shaft,
and we’ll need some &lt;a href=&quot;https://www.mcmaster.com/5537T353/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;bearings that can
slide&lt;/span&gt;&lt;/a&gt; in the aluminum
extrusion. This kind of 20mm profile is often called 2020 for short. As
usual, you can rely on McMaster for it but if you actually want to build
this in real life, one can often find cheaper versions of these parts on
other sites with slightly different configurations. Note that this
configuration has a belt idler with a larger diameter or number of teeth
than the pulley. This will cause a slight discrepancy in distance
traveled by the end effector. This can be tuned out with step
calibration but if you want to build the real thing, find an idler with
the same number of teeth. Sets of these are ubiquitous on platforms like
Amazon from companies with lesser reputations. For our purposes those
will work fine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I joined the cable pulley to the motor head here. It is high on the
motor shaft to avoid hitting the bolts securing the motor in place.
Check to see that it actually clears them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image118.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now measure the offset from the flat top of the extrusion to see how far
to mount the idler on the other side of the extrusion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image92.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re going to start moving faster now again as you start to understand
the process. The next part needs to hold the tensioner / idler for the
pulley. Included is the usual highlighted part from the drawing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image82.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I made this sketch for the bottom.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image98.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I then extruded it out to 5mm and made a second sketch plane on the top
plane of the newly extruded part.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now make a simple sketch to adapt the M5 nut securing part to a hole for
the idler securing screw. Read further if this doesn’t make sense so you
can see it come together in picture form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image136.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Extrude the outer circle through to the inner circle the distance we
measured - the 5mm of thickness already in the bottom and the 1.2mm
thickness of the bottom of the idler. This comes out to 4.55mm despite
what the image says. I made a mistake forgetting to account for the
pulley thickness.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Correction: this height should be 4.55 (5.75 in the image was a mistake
I fixed later in mine) to account for the rim of the pulley. I added a
chamfer here (like a straight fillet) to make it look better and use
less material.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image117.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This bottom height should also be 4.55. I textured it and added a nut
from McMaster for the bottom&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image129.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Made sure the nut was properly joined to the part.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I then took the idler and joined it to the top. But it still needs a
screw to mount to. I measured the distance between the top of the pulley
and the bottom of the part for a maximum screw length and went to
McMaster for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image120.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is really starting to come together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The final part is a slider block for the extrusion. The drawing below
shows the initial size.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image124.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image78.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also added lines centered at 21mm apart to my drawing for a slot so
the part wouldn’t interfere with the extrusion. I extruded one side up
with the hex holes cleared out. I also forgot to make this a new
component, not just a new body. We’ll deal with that in a minute.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, since the first extrusion made the sketch automatically disappear,
I made it visible again so I could extrude different geometry on the
other side of the part from the same sketch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I then made a second sketch for the last part because I was slightly
lazy. It is possible and fairly easy to make this part in one sketch
though.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can fix that body/component mistake by expanding “bodies” in the
browser and clicking on create components from bodies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image123.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I colored it, added chamfers &amp;amp; fillets, brought in the correct parts &amp;amp;
joined them, and prepared for a new type of joint. Click one of the ends
of the new cart part as the first part of the joint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next grab the top front point of the motor controller.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’ve done this successfully, your joint will make the two pieces
join at the front as shown below. But not all is finished yet. If you go
into the motion tab of the joint menu and select “slider” you can set
the motion platform to move back and forth in the Y. The motions will
have a short animation to demonstrate what axis is moving. This can be
useful as our axes may not be consistent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can click and drag the table around to move it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image93.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can jump over to the render workspace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select scene settings and move around the position of the environmental
light to make some nice glossy reflective surfaces shine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hit the render button in whatever aspect ratio you like. If you have a
student license, you can have autodesk do the actual rendering
computation and it’ll probably look better. Just remember to set the
resolution how you want it. Hit the big blue render button in the bottom
right corner and wait a few minutes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image128.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And violà! We have a finished product. Looks a lot nicer than that
first drawing, but which took more time?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image65.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A ton of re-configurations are possible just watch out for the belt
routing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image94.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is through this method that I arrived at a slightly modified final
design for my project. Okay so you have the basics of CAD design in the
book. What resources are there to go further and how do I know my parts
will work after they’ve been manufactured? The answer to the first
question is just put time into it. Find project ideas that interest you
and figure out what buttons do. As for the second question, let’s talk
about design for manufacturing.&lt;/p&gt;

&lt;h1 id=&quot;4-design-for-manufacturing&quot;&gt;&lt;strong&gt;4. Design for Manufacturing&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;1-introduction-1&quot;&gt;1. Introduction&lt;/h2&gt;

&lt;p&gt;This section is designed to help fill the gap between experienced 3D
printer users and those who are just starting out. Ideally, making up
for the experience of making lots of parts that don’t work without
wasting as much plastic in the process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;3D Printing&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;How does it work and where doesn’t it&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Tolerances and making reusable parts&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;What is slicing and how to do it&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Plastics that are generally available and why to choose one
over another&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;!-- end list --&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;CNC Milling&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Really brief overview with other resources&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2-3d-printing&quot;&gt;2. 3D Printing&lt;/h2&gt;

&lt;h3 id=&quot;the-basics&quot;&gt;The Basics&lt;/h3&gt;

&lt;p&gt;3D printers lay down plastic in thin lines that bead together as they
dry, forming a strong bond. These bodies can be very complex and
customizable as long as they are smaller than the build area of whatever
printer you are using (typically a 20cm edged cube). But keep in mind
that FDM printing is really slow and can be less accurate than other
forms of manufacturing. 3D printers are most accurate in the X-Y plane.
With distortion and layer thickness reducing the resolution. So you may
be tempted to design parts in thin assembly ready plates that utilize
the accuracy constraints on the Z. That is the smart way to work. But
instead of 3D printing those parts it is better to cut them out on the
laser cutter because thin wood is often stronger than thin plastic and
importantly the part will come off the bed in far less time. But if you
are set on 3D printing, then understand the differences between the
plastics and the significance of print slice settings.&lt;/p&gt;

&lt;h3 id=&quot;designing-parts-to-be-3d-printed&quot;&gt;Designing Parts to be 3D Printed&lt;/h3&gt;

&lt;h4 id=&quot;geometry&quot;&gt;Geometry&lt;/h4&gt;

&lt;h5 id=&quot;bridging&quot;&gt;Bridging&lt;/h5&gt;

&lt;p&gt;Is when the printer has to lay out plastic between two supported points.
This causes the plastic to sag in these places during the printing
process. This process happens the most on vertical axis holes found in
the walls of items printed going up on the Z-axis.&lt;/p&gt;

&lt;p&gt;Solutions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Make the distances involved really small.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use support material, which will be generated by the slicer.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Support material is additional plastic extruded to ensure that
the part doesn’t sag, it is then removed after the printing
process. Removing it can be hard without damaging the part and
it will always leave a mark on the surfaces it has been
removed from.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At the end of the day, some sag or marks will always be noticeable
on parts unless the bridges are reduced to 0.25”/5mm or less.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3D hubs suggests that an advanced solution is to separate a part
into several pieces to be assembled after printing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;vertical-axis-holes&quot;&gt;Vertical Axis Holes&lt;/h5&gt;

&lt;p&gt;When you put a hole in the side of a 3D printed part, be ready for the
hole to be under size by a decent margin.&lt;/p&gt;

&lt;p&gt;The reasons for this are fairly simple (3Dhubs). As the nozzle prints
the perimeter of a vertical axis hole, it compresses the newly printed
layer down onto the existing build layers to help improve adhesion. The
compressing force from the nozzle deforms the extruded round layer shape
from a circle into a wider and flatter shape (see image below). This
increases the area of contact with the previously printed layer
(improving adhesion), but also increases the width of the extruded
segment. The result of this is a decrease in the diameter of the hole
that is being printed. This issue is particularly bad, when the holes
are smaller relative to the nozzle. Think 3mm holes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image109.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This effect can be accounted for in slicers and even on printer
firmware, but since you are likely working on educational equipment.
Expect the worse end of that spectrum.&lt;/p&gt;

&lt;p&gt;Solutions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If the diameter is not critical, aka the bolt/screw needs to be a
slip fit, then just make the hole oversized in the slicer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the diameter needs to be exact, CAD the hole actual size and
then drill it out when the print comes off the bed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;overhangs&quot;&gt;Overhangs&lt;/h5&gt;

&lt;p&gt;This is an annoying one. Overhang causes a lot of problems in FDM
printing. It occurs when a material is printed only partially supported
by the layer below. It is a lot like bridging but more troublesome. It
is normally fine to print up to 45 degrees. As you can tell at 45
degrees a new layer is half supported by the previous layer. Note that a
side effect of this is uneven cooling causing the tip to trend towards
drifting up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image83.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Solutions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Similar to bridging, use supports or prepare for the worst.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can also avoid this by designing parts without overhang.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;corners&quot;&gt;Corners&lt;/h5&gt;

&lt;p&gt;Keep in mind that no 3d printed outside edge is ever going to be
perfectly square because the nozzle extruders cylindrical plastic. (Most
machines have a 0.4mm nozzle, though it is replaceable and smaller ones
can be purchased making this issue smaller and less noticeable.) This is
important if you are trying to design parts to slide together. Another
important factor is this weird effect called elephant’s foot. Wherein
the first layer of the print is pushed into the bed by the nozzle
causing it to spread out a little over the rest of the wall.
&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image66.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Solutions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3D Hubs: If assembly or overall dimensions are critical to the
function of an FDM part, include a 45o degree chamfer or radius on
all edges touching the build plate. For high precision form &amp;amp; fit
testing, use a different machine or be ready for some trial and
error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;fitted-pins&quot;&gt;Fitted Pins&lt;/h5&gt;

&lt;p&gt;Think the top of a LEGO stud fitting into another. These features are
often used to ensure that parts designed to press fit are lined up
properly. To shorten a lot of information. Always make them &amp;gt;5mm in
diameter, otherwise they will be extremely brittle. This really goes for
all small features. Make them big enough to be useful.&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you need a really small pin, add a fillet at the base to shift
the stress point up the length of the rod.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;more-advanced-stuff&quot;&gt;More Advanced Stuff&lt;/h4&gt;

&lt;h5 id=&quot;rules-of-thumb&quot;&gt;Rules of Thumb&lt;/h5&gt;

&lt;p&gt;3D Hubs gives this &lt;a href=&quot;https://www.hubs.com/knowledge-base/key-design-considerations-3d-printing/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;convenient list of rules of
thumb&lt;/span&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If a bridge exceeds 5mm, sagging or marks from support material
can occur. Splitting the design or post-processing can eliminate
this issue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For critical vertical hole diameters, drilling after printing is
recommended if high accuracy is desirable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The addition of support will allow FDM printers to print wall
angles greater than 45 degrees.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Include a 45 degree chamfer or radius on all edges of an FDM part
touching the build plate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For applications with small vertical pins, add a small fillet at
the base or consider inserting an off the shelf pin into a printed
hole instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Splitting a model, re-orientating holes, and specifying build
direction are all factors that can lower cost, speed up the
printing process, and improve the strength and print quality of a
design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hole-tolerances-and-integrating-reusable-fasteners&quot;&gt;Hole Tolerances and Integrating reusable fasteners&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image115.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fig 14, table of tolerances for different diameter holes (mm). Note this
might be a little different depending on the 3D printer you are using.
Always a good idea to oversize things a bit.&lt;/p&gt;

&lt;p&gt;Charts like this provide really nice numbers for manufacturing and CAD
based on what you want to use the screws for. Keep in mind the top,
where it says close fit, medium fit, and free fit. If you want a chart
like this for non-metric screw sizes… Don’t use non-metric screw sizes
(or google it and be judged by future generations for millenia to come).&lt;/p&gt;

&lt;h5 id=&quot;attaching-several-3d-printed-parts&quot;&gt;Attaching several 3D printed parts&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bolts and Nuts&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Reliable, cheap, simple, somewhat inconvenient&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bolt and heat-set inserts for plastics.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Reliable, expensive, simple
convenient&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image113.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;They are typically bronze and are very simple to use. Just
over size your hole to the spec of the manufacturer and then
set the thread insert onto the hole and place a hot soldering
iron onto the top. It will soften the plastic and the thread
insert will slide in. Once it is in place, remove the iron and
gently blow on the plastic around the threaded insert.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Super glue/solvent&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Excellent solution though difficult to undue and can be messy.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Welding&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Plastic welding is really easy and a fun way to get a strong
connection between two or more pieces. Pick up a plastic
welder or just use a discarded soldering iron. Run the warm
tip along the seam until you cannot see between the parts.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Friction&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Be careful on this one, it is a little difficult to explain to
an authority figure.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Place some discarded filament into a dremel tool and spin it
up while applying light pressure to the joint. While it will
require some practice and experimentation, it can provide a
fast, wireless way to connect stuff.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;slicing-3d-prints&quot;&gt;Slicing 3D Prints&lt;/h3&gt;

&lt;h4 id=&quot;file-selection&quot;&gt;File Selection&lt;/h4&gt;

&lt;p&gt;All 3D prints start with a 3D model, that model is generally in the .STL
format. In order to send the model to the printer it has to be sliced,
or converted into motion coordinates for the machine to interpret. This
process is called slicing and the programs that do it are called
slicers. This is useful as frontend information because lots of settings
between you exporting a 3D printed model and the model going to the
printer can be edited or optimized for strength or weight. The main ones
to consider are:&lt;/p&gt;

&lt;h4 id=&quot;infill-percentage&quot;&gt;Infill percentage&lt;/h4&gt;

&lt;p&gt;Infill percentage is almost certainly the most important characteristic
to manage while slicing a new 3D Print. It is the amount of plastic fill
that is used inside of the part. 20% infill is strong enough for the
majority of 3D prints which is why that is the default setting on almost
every slicer. If you need to make a very light part you can drop the
infill or if you are making a very small load bearing part, you may need
to increase the infill. Note in the figure below the red lines inside
the outer shell on the left figure and then their disappearance on the
right. That is the infil level going from a geometric 20% to a barebones
0%. Basically the stronger you need the part to be, the higher the
infill should be.&lt;/p&gt;

&lt;h3&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image81.jpg&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image104.jpg&quot; alt=&quot;&quot; /&gt;&lt;/h3&gt;

&lt;h4 id=&quot;coordination-or-relative-position-and-supports&quot;&gt;Coordination or relative position (and supports)&lt;/h4&gt;

&lt;p&gt;This one is simple but important. As mentioned earlier, the printer has
the most resolution on the ground X-Y plane. So it is an important
decision how the part is oriented. Ideally orientation of printing has
been a consideration throughout the design process. The sooner you think
about this the better. Note in the figure to the right how the layers
going up are very low resolution. Causing the outside of the drum to be
very rough. Features that require accuracy in the Z axis are going to be
rougher than those that only require accuracy in the X-Y axes. To
further illustrate this, notice how the circle in the next figure is
much smoother.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image96.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;shell-thickness&quot;&gt;Shell Thickness&lt;/h4&gt;

&lt;p&gt;This is a really simple one that you basically never need to worry
about, but should know is tweakable anyway. In the figure below you see
a cross section of a sliced part with the infil in red and the outside
layers in yellow. The shell thickness is the width of the outside wall
as circled in the picture. You never need to worry about messing this
unless you are printing without infill.&lt;/p&gt;

&lt;h3 id=&quot;-1&quot;&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image59.png&quot; alt=&quot;&quot; /&gt;&lt;/h3&gt;

&lt;h4 id=&quot;layer-height&quot;&gt;Layer Height&lt;/h4&gt;

&lt;p&gt;This is another fairly simple one. The reason it is below shell
thickness is because it doesn’t have the power to compromise the
integrity of the part. Just exponentially increase the amount of time it
will take to print. If you have a small part, print it at 0.10-0.20, for
really big stuff go up to 0.3-0.35. Low layer heights result in passes
on the machine making high res parts take forever to print, print at low
resolution whenever you can.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/CNCMachine/image69.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;scale&quot;&gt;Scale&lt;/h4&gt;

&lt;p&gt;Just keep in mind that you can scale parts in the slicer without having
to edit the actual design file. Allowing for quick customization for
cosmetic parts like models, jewelry, or name plates.&lt;/p&gt;

&lt;h3 id=&quot;life-in-plastic&quot;&gt;Life in Plastic&lt;/h3&gt;

&lt;p&gt;Now onto a slightly less useful and interesting part of the lesson:
Plastic choice. This can seem like a pretty mundane and useless decision
to make during an engineering project, but it can make quite the
difference.&lt;/p&gt;

&lt;h4 id=&quot;pla&quot;&gt;PLA&lt;/h4&gt;

&lt;p&gt;Hassle: very low, 15$ per roll, non-translucent, glossy coloring&lt;/p&gt;

&lt;p&gt;Is the cheapest filament or plastic by far. Always start with PLA to
make sure the dimensions are right for a part you are making because it
is the cheapest to replace. It also prints in the highest quality so
cosmetic parts are best kept in the warm and fuzzy realm of printing
with PLA. It is also the weakest mainstream printer filament and the
easiest to melt. On a warm summer day it will get soft and lose form
(don’t leave PLA in a warm car).&lt;/p&gt;

&lt;p&gt;Additional bonus when working with PLA, it is biodegradable.&lt;/p&gt;

&lt;h4 id=&quot;abs&quot;&gt;ABS&lt;/h4&gt;

&lt;p&gt;Hassle: pretty high, 23$ per spool, non-translucent, glossy coloring&lt;/p&gt;

&lt;p&gt;ABS is much harder to print than PLA so parts that are supposed to look
very smooth and professional should probably stick to PLA. But it is
stronger for applications where high yield strength is necessary, it
also won’t soften on a warm day, making it much more useful for
applications involving nichrome wire or other instances of induced
heating.&lt;/p&gt;

&lt;h4 id=&quot;petg&quot;&gt;PETG&lt;/h4&gt;

&lt;p&gt;Hassle: pretty low, 27$ per spool, translucent, glossy coloring&lt;/p&gt;

&lt;p&gt;PETG is a slightly modified version of the plastic that most bottles are
made from, modified to be clearer and less brittle. It is stronger again
than ABS, it cannot be overheated and made brittle, it can be
sterilized, it is more impact resistant and it doesn’t soften under
intense radioactive conditions.&lt;/p&gt;

&lt;p&gt;Not that the cost increase may not seem like a big deal, it is really
more the hassle increase due to how hard getting non-pla materials to
stick is.&lt;/p&gt;

&lt;h4 id=&quot;weird-other-stuff&quot;&gt;Weird Other Stuff&lt;/h4&gt;

&lt;p&gt;There are lots of other filaments with properties like even more
strength than PETG, actually being clear, having embedded materials like
wood, stone, or ceramics, etc… All of these are more expensive, will
wear your machines down faster, and may require temps your machine can’t
reach but they are all really cool. Do some research.&lt;/p&gt;

&lt;h2 id=&quot;4-design-for-manufacturing-with-cnc&quot;&gt;4. Design for manufacturing with CNC&lt;/h2&gt;

&lt;p&gt;One potential use for this class is to design a DIY cnc milling machine
and this section is really only useful if you want to go that far or
take the time to machine the parts we’ve been working on in this class.
The process of DFM for milling is very different from 3D printing and
ultimately much more difficult. I recommend getting a good idea of what
cnc machining looks like and the way it works for this to be a really
effective use of time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hubs.com/knowledge-base/how-design-parts-cnc-machining/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;How to design parts for CNC machining |
Hubs&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;5-epilogue&quot;&gt;&lt;strong&gt;5. Epilogue&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;1-introduction-2&quot;&gt;1. Introduction&lt;/h2&gt;

&lt;p&gt;What did we just do? Why did we do it? How can we do more? Well I can’t
really answer those questions for you, but I do want to address some
loose ends. While trying my best to help you discover if you like this
process, what parts are your favorite, and how to get better at them.
With plenty of time for safety.&lt;/p&gt;

&lt;h3 id=&quot;structure-1&quot;&gt;Structure:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Introduction&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;You’re already here.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;General notes on machine safety&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Materials and why researching them beforehand is important&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Calibration and software implementation plus milling machine usage
including basic CAM and tooling overview.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Final tidbits about how you can use an “okay” milling machine to
make a better one.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2-safety-concerns-equipment-and-material-handling&quot;&gt;2. Safety Concerns, Equipment, and Material Handling&lt;/h2&gt;

&lt;h3 id=&quot;introduction-to-safe-cnc-operation&quot;&gt;Introduction to Safe CNC Operation&lt;/h3&gt;

&lt;p&gt;Something to keep in mind about machining is that it doesn’t compare too
well to other forms of manufacturing available to makers. Processes like
3D printing, laser cutting, and even plasma cutting have far fewer
variables to consider and can generally be nearly totally automated. The
stakes of plasma cuts, 3D prints, and laser cutting failures are also
generally fairly well constrained to poor performance and perhaps a
small chance of fire or dangerous fumes. CNC milling or machining really
raises the bar in this regard. The first things to consider are crashes
which can happen at high speeds sending airborne shrapnell in near
random directions. These occur when the cutting tool hits the wrong
thing or isn’t moving too fast or isn’t moving fast enough. Everything
in the equation can be a projectile: the material, the things holding
the material, to the cutting tool or end mill, etc… Next the fumes and
fire risks need to be accounted for. Lots of materials create hazardous
dust or chips when machined that need containment.&lt;/p&gt;

&lt;h2 id=&quot;3-a-note-on-materials-handling-and-selection&quot;&gt;3. A Note on Materials Handling and Selection&lt;/h2&gt;

&lt;p&gt;After a maker moves past exclusive use of 3D printers, they need to get
into the habit of doing some basic research on any and all materials
they are interacting with. Any spool on a 3D printer is a heavily vetted
and researched item. The versatility of more advanced maker tools comes
with costs. Almost anything can be machined but since most materials
aren’t designed or sold for the sole purpose of CNC, it can take time to
find the safety information you may need. And taking that time is always
worthwhile.&lt;/p&gt;

&lt;h3 id=&quot;device-specifics&quot;&gt;Device Specifics&lt;/h3&gt;

&lt;h4 id=&quot;laser-cutters&quot;&gt;Laser Cutters&lt;/h4&gt;

&lt;p&gt;Many materials are available as thin, hard, sheets, but not all of them
are well suited to laser cutters. Optimal choices for laser cutting will
“vaporize” instead of melting under the extreme heat of the laser. Many
plastics, especially those commonly used for food storage like HDPE and
Polycarbonate melt and burn causing terrible quality parts and high risk
of damage to a laser cutter and exposure to fairly toxic fumes[2]. It
is always a good idea to make sure a material you want to laser cut is
either on the “machine approved list of materials” or checking elsewhere
that it has behavior similar to materials that are. The main dangers
from laser cutters are eye damage, risk of combustion, and fume
exposure. Most laser cutters are fully enclosed in a protective shield
and have a vacuum pump pulling air out of the enclosure and filtering
it. If a laser cutter is missing one or both of these it is a good idea
to use a light respirator mask and laser rated shaded safety glasses. As
for combustion risks, they are low if you have done your research on the
material you’re cutting but it’s always a good idea to know where the
fire extinguisher is located.&lt;/p&gt;

&lt;h4 id=&quot;plasma-cutters&quot;&gt;Plasma Cutters&lt;/h4&gt;

&lt;p&gt;Plasma cutters work by using accelerated super heated electrically
ionized gas to cut through conductive metals. The limitation that the
work pieces need to be conductive metals keeps things pretty simple
here. The usual conductive metal suspects mild/tool Steel, Iron,
Aluminum, Brass, Copper, and Stainless are all chemically stable and
relatively safe. However, the interaction between the plasma and the
metal is extremely dangerous. The bright arcs require welding visors to
protect our sensitive eyes and the extreme heat and force of the plasma
creates sparks and can create airborne chunks of superheated metal. When
plasma cutting, ensure you’re wearing the proper safety equipment for
welding the equivalent material. This includes, long sleeves to block
from small burning fragments and from high UV exposure, a welding visor,
and a respirator mask for fine dust and metal impurities made airborne
by the heat.&lt;/p&gt;

&lt;h4 id=&quot;milling-machines&quot;&gt;Milling Machines&lt;/h4&gt;

&lt;p&gt;As mentioned before the big general safety concerns with CNC milling
involve the end mills (milling machine specific drill bits for lateral
and vertical cutting instead of just vertical) breaking during
operation. This generally happens because the machine programmer (you)
has fallen into one of thousands of pitfalls. For hobbyist machines, the
speeds the fractured metal will reach can be a little frightening but
solid eye protection like safety glasses or a clear face shield
seriously mitigate the risks. The end mills are so lightweight that it’s
unlikely the force from an endmill will cause more than a light bruise
in a worst case scenario. If the “workpiece” or material being machined
gets thrown, that would be substantially worse. It is important to make
sure that any material being held down for machining is held strongly
enough to withstand a serious blow from a mallet. A CNC can easily exert
forces rivaling and even massively exceeding that hammer strike in
extreme circumstances. The material hazards involved in CNC machining
are generally derived from the way the CNC mill cuts material. The end
mill takes small slices as it moves across the material and some
materials, especially the soft ones, chip off in very small pieces.
Aluminum chips will often be sized as splinters and very sharp while in
stark comparison MDF or Medium-Density Fibreboard when milled often
produces micrometer fine dust. The fine dust produced when machining MDF
is dangerous because it contains high levels of formaldehyde and the
fine particles can penetrate deep into the lungs. Another example of a
material that’s dangerous to CNC machine is carbon fiber which produces
small particles that are extremely sharp causing cuts inside the lungs
and breathing tubes. Symptoms of inhaling this kind of dust are similar
to the fairly well known lung disease: silicosis. Please wear a mask
when cutting these materials at the very least.&lt;/p&gt;

&lt;p&gt;With some of the scary stuff out of the way, the sheer amount of
versatility offered by CNC milling is exciting. Mills can cut almost
anything to pretty precise dimensions. But that means that materials
with huge health risks associated with their use can slip by without a
user taking the proper precautions. Always read about the materials you
are about to cut beforehand and take proper precautions.&lt;/p&gt;

&lt;h2 id=&quot;3-whats-next-after-hardware-and-electrical-assembly&quot;&gt;3. What’s next after hardware and electrical assembly?&lt;/h2&gt;

&lt;h3 id=&quot;calibration-and-software-implementation&quot;&gt;Calibration and software implementation&lt;/h3&gt;

&lt;p&gt;This section is heavily reliant on information from part 2 of this
coursework. Especially the materials in section 5 relating to
information and communication structure of the milling machine. To
briefly review that section, a mill’s electrical control system has a
microcontroller and a computer that interact together to drive the CNC.
The computer will have control software that will parse or interpret the
CAM or toolpaths you’ve generated into serial or digital coordinate and
machine status information for the controller. Many CNC controllers,
especially older ones will be very “plug and play” because their
hardware is built to be very proprietary. Newer CNC controllers will be
built on more versatile platforms like the Arduino microcontroller which
may require finding relevant source code and uploading it to the
microcontroller. This article from Howtomechatronics
(&lt;a href=&quot;https://howtomechatronics.com/tutorials/how-to-setup-grbl-control-cnc-machine-with-arduino/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;How to Setup GRBL &amp;amp; Control CNC Machine with
Arduino
(howtomechatronics.com)&lt;/span&gt;&lt;/a&gt;
is an extremely useful guide for getting a handle on putting the right
community made software on your Arduino powered CNC. The same article
goes into how to calibrate a CNC machine too. This is useful because
CNCs are very good at knowing how far they’ve traveled since they were
powered up but pretty bad at figuring out their starting position. This
is why CNC machines need to be “homed”. This is a prompted or unprompted
slow motion of each axis in a defined direction until each gets to an
origin position noted by a switch or other sensor of some kind.&lt;/p&gt;

&lt;h3 id=&quot;milling-machine-usage-cam-and-understanding-tooling&quot;&gt;Milling Machine Usage, CAM, and understanding tooling&lt;/h3&gt;

&lt;p&gt;Milling machines are awesome tools but they are slow and expensive. As
you become a machinist you’ll begin to see exactly where milling
machines work and what makes them more difficult and unruly. A lot of
projects will take as much time to make tool paths/CAM for as they took
to design. There are plenty of great introductory resources online to
get started, I will link a few of the resources I’ve found the most
useful and introduce the workflow of a lot of the machining operations
I’ve done.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.instructables.com/Fusion-360-CAM-Tutorial-for-CNC-Beginners/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;Fusion 360 CAM for CNC Beginners : 19 Steps
(with Pictures) -
Instructables&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.autodesk.com/products/fusion-360/blog/getting-started-introduction-to-cam-and-toolpaths/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;Fusion 360 CAM: Introduction &amp;amp; Toolpaths -
Fusion 360 Blog
(autodesk.com)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Do_C_NLH5sw&quot;&gt;&lt;span class=&quot;underline&quot;&gt;https://www.youtube.com/watch?v=Do_C_NLH5sw&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.autodesk.com/products/fusion-360/blog/cam-for-fusion-360-tips-and-tricks/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;CAM for Fusion 360 Tips and Tricks - Fusion 360
Blog
(autodesk.com)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of the CAM you’ll write for starter CNC projects will be
essentially 2.5 axis machining. Which is when you are only interested in
a 2 axis sketch with various features having only a straight extruded
depth. Think of parts that can be designed with only one sketch. Like a
flat panel with a series of holes and a special outline. The lack of
complex 3D geometry on these parts makes them comparably very easy to
design CAM for.&lt;/p&gt;

&lt;h4 id=&quot;some-simple-cam-tools-and-advice&quot;&gt;Some Simple CAM tools and advice&lt;/h4&gt;

&lt;p&gt;For the majority of 2.5 axis milling there are three cam operations to
consider. 2D Pocket, 2D Contour, and Engrave. 2D Pocket is the tool for
clearing large amounts of stock without making a hole. It makes simple
recessed parts quickly and efficiently. 2D Contour is for “cutting
things out.”It creates long slots as deep as the stock. It is important
when contour machining to enable the “tabs” option so the parts being
machined don’t instantly fly out.&lt;/p&gt;

&lt;h3 id=&quot;the-path-to-a-better-machine&quot;&gt;The path to a better machine&lt;/h3&gt;

&lt;p&gt;If you’ve decided to follow along on the hardware and electrical side of
this project and have a small budget, but reasonably capable machine or
if you’re considering taking the dive there is a long and reasonably
interesting history of improving machines to follow. A very well
designed machine tool should always be able to make a more accurate
version of itself. This process is exactly how we are able to achieve
the extreme precision of commercial machines today from the wood and
stones our ancestors used.&lt;/p&gt;

&lt;p&gt;If you’re interested in how this process worked historically, or in
following along with with your own slightly optimised process check out
a series of books by a famous DIYer called David Gingery who wrote a
series of books on building a formidable machine shop with time and
materials available in dumpsters and hardware stores.&lt;/p&gt;

&lt;p&gt;Books: &lt;a href=&quot;https://gingerybookstore.com/MetalWorkingShopFromScrap.html&quot;&gt;&lt;span class=&quot;underline&quot;&gt;Build Your Own Metal Working Shop From
Scrap - Hard Bound Edition
(gingerybookstore.com)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good Video Resource: &lt;a href=&quot;https://hackaday.com/2016/07/07/the-best-gingery-lathe-video-series-to-date/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;The Best Gingery Lathe
Video Series To Date |
Hackaday&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what steps can I take with this specific device? Well that really
depends on your time and creativity. The pen plotter really doesn’t need
physical strength upgrades unless you want to build a bigger one. As
mentioned in section 3, our pen plotter can fairly easily be turned into
a somewhat capable milling machine. From there the mill should be able
to make ⅛” parts out of aluminum which could be used to shore up the
much less rigid 3D printed parts increasing rigidity and potentially
feedspeeds. As mentioned in section 2, there are plenty of linear motion
systems across all price ranges that could be implemented. The aluminum
extrusion in combination with steel linear bearings would be a good
combo for moving into more audacious CNC aluminum projects. Really, the
only constraints on the upwards mobility of this system are time and
money.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://index-of.es/Varios-2/Motors%20for%20Makers%20A%20Guide%20to%20Steppers,%20Servos%20and%20Other%20Electrical%20Machines.pdf&quot;&gt;&lt;span class=&quot;underline&quot;&gt;Motors for Makers: A Guide to Steppers,
Servos, and Other Electrical Machines
(index-of.es)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Note in this case “fairly toxic fumes” denotes NFPA fire rating of
1, with hazard identification noting toxic gases and fumes are
released in burning but overexposure poses little likelihood of
significant side effects. &lt;a href=&quot;https://www.sctech.com/MSDS-Polycarbonate-Sheets&quot;&gt;&lt;span class=&quot;underline&quot;&gt;SciCron | MSDS |
Polycarbonate Sheets
(sctech.com)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="project" /><summary type="html"></summary></entry><entry><title type="html">example tests</title><link href="http://localhost:4000/change/2020/08/01/example-tests.html" rel="alternate" type="text/html" title="example tests" /><published>2020-08-01T10:06:30-04:00</published><updated>2020-08-01T10:06:30-04:00</updated><id>http://localhost:4000/change/2020/08/01/example-tests</id><content type="html" xml:base="http://localhost:4000/change/2020/08/01/example-tests.html">&lt;h1 id=&quot;markdown-and-other-cool-examples-webpage&quot;&gt;Markdown and other cool examples webpage&lt;/h1&gt;

&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;

&lt;h1 id=&quot;example-heading&quot;&gt;Example Heading&lt;/h1&gt;
&lt;h2 id=&quot;example-subheading&quot;&gt;Example subheading&lt;/h2&gt;

&lt;h1 id=&quot;images&quot;&gt;Images&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/boat.jpg&quot; alt=&quot;Image test&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;equations&quot;&gt;Equations&lt;/h1&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque quis odio faucibus, sodales diam quis, lobortis metus. Nullam fermentum nulla sit amet ante lacinia molestie. Morbi venenatis blandit lectus, nec porttitor odio gravida a. Vivamus quis mattis quam. Phasellus malesuada facilisis est nec convallis. Integer ultrices massa faucibus, placerat diam id, porta ex. Donec felis risus, molestie vitae aliquet imperdiet, luctus id augue. Nullam tempor ut orci non luctus. Nullam accumsan cursus ullamcorper. Nunc convallis massa non tellus mollis aliquet. Aenean maximus nulla dolor, malesuada laoreet lacus maximus vitae. Aliquam erat volutpat. In ac interdum ligula. Fusce dignissim, purus sed laoreet consectetur, massa purus suscipit metus, vitae pretium magna orci non metus. Sed mollis urna vitae placerat tristique. Nunc laoreet orci a laoreet suscipit.&lt;/p&gt;

&lt;!-- $$\tilde G = \mathbb{R}^2 \ltimes O(2)$$ --&gt;

&lt;p&gt;\[ H(p,q) = -\int_X p(x) \; \log q(x) d\mu(x)\]&lt;/p&gt;

&lt;h1 id=&quot;code-blocks&quot;&gt;Code blocks&lt;/h1&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/imgs/boat.jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;data-graphs&quot;&gt;data graphs&lt;/h1&gt;

&lt;div id=&quot;tester&quot; style=&quot;width:600px;height:250px;&quot;&gt;&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
	TESTER = document.getElementById('tester');

	Plotly.plot( TESTER, [{
	    x: [1, 2, 3, 4, 5],
	    y: [1, 2, 4, 8, 16] }], { 
	    margin: { t: 0 } }, {showSendToCloud:true} );
&lt;/script&gt;

&lt;h1 id=&quot;equation-graphs&quot;&gt;equation graphs&lt;/h1&gt;

&lt;canvas id=&quot;myCanvas&quot; width=&quot;578&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
  var myGraph = new Graph({
    canvasId: 'myCanvas',
    minX: -10,
    minY: -10,
    maxX: 10,
    maxY: 10,
    unitsPerTick: 1
  });

  myGraph.equations.push([(function(x) {
    return 5 * Math.sin(x);
  }), 'green', 3]);
  myGraph.equations.push([(function(x) {
    return x * x;
  }), 'blue', 3]);
  myGraph.equations.push([(function(x) {
    return 1 * x;
  }), 'red', 3]);
  myGraph.redraw();

&lt;/script&gt;

&lt;h1 id=&quot;embed-youtube-videos&quot;&gt;Embed youtube videos&lt;/h1&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9LssTi4X8jY&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><category term="change" /><summary type="html">Markdown and other cool examples webpage Basics Example Heading Example subheading Images Equations Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque quis odio faucibus, sodales diam quis, lobortis metus. Nullam fermentum nulla sit amet ante lacinia molestie. Morbi venenatis blandit lectus, nec porttitor odio gravida a. Vivamus quis mattis quam. Phasellus malesuada facilisis est nec convallis. Integer ultrices massa faucibus, placerat diam id, porta ex. Donec felis risus, molestie vitae aliquet imperdiet, luctus id augue. Nullam tempor ut orci non luctus. Nullam accumsan cursus ullamcorper. Nunc convallis massa non tellus mollis aliquet. Aenean maximus nulla dolor, malesuada laoreet lacus maximus vitae. Aliquam erat volutpat. In ac interdum ligula. Fusce dignissim, purus sed laoreet consectetur, massa purus suscipit metus, vitae pretium magna orci non metus. Sed mollis urna vitae placerat tristique. Nunc laoreet orci a laoreet suscipit. \[ H(p,q) = -\int_X p(x) \; \log q(x) d\mu(x)\] Code blocks ![Image test](/imgs/boat.jpg) data graphs equation graphs Embed youtube videos</summary></entry></feed>